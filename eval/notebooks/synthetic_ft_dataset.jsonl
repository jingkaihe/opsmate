{"query": "A user asked the following question:\nQuestion: Can you explain how containers within a Pod share resources?\nThis is about the following runbook:\nRunbook Title: Resource sharing and communication\nRunbook Content: Resource sharing and communicationPods enable data sharing and communication among their constituent\ncontainers.\n", "relevant_passages": ["Can you explain how containers within a Pod share resources?"]}
{"query": "A user asked the following question:\nQuestion: Can I use the Pod's name as an identifier in my application?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Downward API\ncontent_type: concept\nweight: 170\ndescription: >\nThere are two ways to expose Pod and container fields to a running container:\nenvironment variables, and as files that are populated by a special volume type.\nTogether, these two ways of exposing Pod and container fields are called the downward API.\n---  \n<!-- overview -->  \nIt is sometimes useful for a container to have information about itself, without\nbeing overly coupled to Kubernetes. The _downward API_ allows containers to consume\ninformation about themselves or the cluster without using the Kubernetes client\nor API server.  \nAn example is an existing application that assumes a particular well-known\nenvironment variable holds a unique identifier. One possibility is to wrap the\napplication, but that is tedious and error-prone, and it violates the goal of low\ncoupling. A better option would be to use the Pod's name as an identifier, and\ninject the Pod's name into the well-known environment variable.  \nIn Kubernetes, there are two ways to expose Pod and container fields to a running container:  \n* as [environment variables](/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\n* as [files in a `downwardAPI` volume](/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/)  \nTogether, these two ways of exposing Pod and container fields are called the\n_downward API_.  \n<!-- body -->\n", "relevant_passages": ["Can I use the Pod's name as an identifier in my application?"]}
{"query": "A user asked the following question:\nQuestion: How does a sidecar container relate to the main application container?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Sidecar Containers\ncontent_type: concept\nweight: 50\n---  \n<!-- overview -->\n{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \nSidecar containers are the secondary containers that run along with the main\napplication container within the same {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}}.\nThese containers are used to enhance or to extend the functionality of the primary _app\ncontainer_ by providing additional services, or functionality such as logging, monitoring,\nsecurity, or data synchronization, without directly altering the primary application code.  \nTypically, you only have one app container in a Pod. For example, if you have a web\napplication that requires a local webserver, the local webserver is a sidecar and the\nweb application itself is the app container.  \n<!-- body -->\n", "relevant_passages": ["How does a sidecar container relate to the main application container?"]}
{"query": "A user asked the following question:\nQuestion: What actions can I use for container probes in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Container probes\nRunbook Content: Container probesA _probe_ is a diagnostic performed periodically by the kubelet on a container. To perform a diagnostic, the kubelet can invoke different actions:  \n- `ExecAction` (performed with the help of the container runtime)\n- `TCPSocketAction` (checked directly by the kubelet)\n- `HTTPGetAction` (checked directly by the kubelet)  \nYou can read more about [probes](/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)\nin the Pod Lifecycle documentation.\n", "relevant_passages": ["What actions can I use for container probes in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: Can I use capabilities like CAP_SYS_MODULE in a pod with user namespaces?\nThis is about the following runbook:\nRunbook Title: Understanding user namespaces for pods {#pods-and-userns}\nRunbook Content: Understanding user namespaces for pods {#pods-and-userns}Several container runtimes with their default configuration (like Docker Engine,\ncontainerd, CRI-O) use Linux namespaces for isolation. Other technologies exist\nand can be used with those runtimes too (e.g. Kata Containers uses VMs instead of\nLinux namespaces). This page is applicable for container runtimes using Linux\nnamespaces for isolation.  \nWhen creating a pod, by default, several new namespaces are used for isolation:\na network namespace to isolate the network of the container, a PID namespace to\nisolate the view of processes, etc. If a user namespace is used, this will\nisolate the users in the container from the users in the node.  \nThis means containers can run as root and be mapped to a non-root user on the\nhost. Inside the container the process will think it is running as root (and\ntherefore tools like `apt`, `yum`, etc. work fine), while in reality the process\ndoesn't have privileges on the host. You can verify this, for example, if you\ncheck which user the container process is running by executing `ps aux` from\nthe host. The user `ps` shows is not the same as the user you see if you\nexecute inside the container the command `id`.  \nThis abstraction limits what can happen, for example, if the container manages\nto escape to the host. Given that the container is running as a non-privileged\nuser on the host, it is limited what it can do to the host.  \nFurthermore, as users on each pod will be mapped to different non-overlapping\nusers in the host, it is limited what they can do to other pods too.  \nCapabilities granted to a pod are also limited to the pod user namespace and\nmostly invalid out of it, some are even completely void. Here are two examples:\n- `CAP_SYS_MODULE` does not have any effect if granted to a pod using user\nnamespaces, the pod isn't able to load kernel modules.\n- `CAP_SYS_ADMIN` is limited to the pod's user namespace and invalid outside\nof it.  \nWithout using a user namespace a container running as root, in the case of a\ncontainer breakout, has root privileges on the node. And if some capability were\ngranted to the container, the capabilities are valid on the host too. None of\nthis is true when we use user namespaces.  \nIf you want to know more details about what changes when user namespaces are in\nuse, see `man 7 user_namespaces`.\n", "relevant_passages": ["Can I use capabilities like CAP_SYS_MODULE in a pod with user namespaces?"]}
{"query": "A user asked the following question:\nQuestion: What happens after a Pod is scheduled on a node regarding network readiness?\nThis is about the following runbook:\nRunbook Title: Pod network readiness {#pod-has-network}\nRunbook Content: Pod conditionsPod network readiness {#pod-has-network}{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \n{{< note >}}\nDuring its early development, this condition was named `PodHasNetwork`.\n{{< /note >}}  \nAfter a Pod gets scheduled on a node, it needs to be admitted by the kubelet and\nto have any required storage volumes mounted. Once these phases are complete,\nthe kubelet works with\na container runtime (using {{< glossary_tooltip term_id=\"cri\" >}}) to set up a\nruntime sandbox and configure networking for the Pod. If the\n`PodReadyToStartContainersCondition`\n[feature gate](/docs/reference/command-line-tools-reference/feature-gates/) is enabled\n(it is enabled by default for Kubernetes {{< skew currentVersion >}}), the\n`PodReadyToStartContainers` condition will be added to the `status.conditions` field of a Pod.  \nThe `PodReadyToStartContainers` condition is set to `False` by the Kubelet when it detects a\nPod does not have a runtime sandbox with networking configured. This occurs in\nthe following scenarios:  \n- Early in the lifecycle of the Pod, when the kubelet has not yet begun to set up a sandbox for\nthe Pod using the container runtime.\n- Later in the lifecycle of the Pod, when the Pod sandbox has been destroyed due to either:\n- the node rebooting, without the Pod getting evicted\n- for container runtimes that use virtual machines for isolation, the Pod\nsandbox virtual machine rebooting, which then requires creating a new sandbox and\nfresh container network configuration.  \nThe `PodReadyToStartContainers` condition is set to `True` by the kubelet after the\nsuccessful completion of sandbox creation and network configuration for the Pod\nby the runtime plugin. The kubelet can start pulling container images and create\ncontainers after `PodReadyToStartContainers` condition has been set to `True`.  \nFor a Pod with init containers, the kubelet sets the `Initialized` condition to\n`True` after the init containers have successfully completed (which happens\nafter successful sandbox creation and network configuration by the runtime\nplugin). For a Pod without init containers, the kubelet sets the `Initialized`\ncondition to `True` before sandbox creation and network configuration starts.\n", "relevant_passages": ["What happens after a Pod is scheduled on a node regarding network readiness?"]}
{"query": "A user asked the following question:\nQuestion: How do I specify the operating system for my pod in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Pod OS\nRunbook Content: Working with PodsPod OS{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nYou should set the `.spec.os.name` field to either `windows` or `linux` to indicate the OS on\nwhich you want the pod to run. These two are the only operating systems supported for now by\nKubernetes. In the future, this list may be expanded.  \nIn Kubernetes v{{< skew currentVersion >}}, the value of `.spec.os.name` does not affect\nhow the {{< glossary_tooltip text=\"kube-scheduler\" term_id=\"kube-scheduler\" >}}\npicks a node for the Pod to run on. In any cluster where there is more than one operating system for\nrunning nodes, you should set the\n[kubernetes.io/os](/docs/reference/labels-annotations-taints/#kubernetes-io-os)\nlabel correctly on each node, and define pods with a `nodeSelector` based on the operating system\nlabel. The kube-scheduler assigns your pod to a node based on other criteria and may or may not\nsucceed in picking a suitable node placement where the node OS is right for the containers in that Pod.\nThe [Pod security standards](/docs/concepts/security/pod-security-standards/) also use this\nfield to avoid enforcing policies that aren't relevant to the operating system.\n", "relevant_passages": ["How do I specify the operating system for my pod in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What should I consider if I want to perform a node upgrade on my cluster?\nThis is about the following runbook:\nRunbook Title: How to perform Disruptive Actions on your Cluster\nRunbook Content: How to perform Disruptive Actions on your ClusterIf you are a Cluster Administrator, and you need to perform a disruptive action on all\nthe nodes in your cluster, such as a node or system software upgrade, here are some options:  \n- Accept downtime during the upgrade.\n- Failover to another complete replica cluster.\n-  No downtime, but may be costly both for the duplicated nodes\nand for human effort to orchestrate the switchover.\n- Write disruption tolerant applications and use PDBs.\n- No downtime.\n- Minimal resource duplication.\n- Allows more automation of cluster administration.\n- Writing disruption-tolerant applications is tricky, but the work to tolerate voluntary\ndisruptions largely overlaps with work to support autoscaling and tolerating\ninvoluntary disruptions.\n", "relevant_passages": ["What should I consider if I want to perform a node upgrade on my cluster?"]}
{"query": "A user asked the following question:\nQuestion: How can I learn about the lifecycle of a Pod in Kubernetes?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn about the [lifecycle of a Pod](/docs/concepts/workloads/pods/pod-lifecycle/).\n* Learn about [RuntimeClass](/docs/concepts/containers/runtime-class/) and how you can use it to\nconfigure different Pods with different container runtime configurations.\n* Read about [PodDisruptionBudget](/docs/concepts/workloads/pods/disruptions/) and how you can use it to manage application availability during disruptions.\n* Pod is a top-level resource in the Kubernetes REST API.\nThe {{< api-reference page=\"workload-resources/pod-v1\" >}}\nobject definition describes the object in detail.\n* [The Distributed System Toolkit: Patterns for Composite Containers](/blog/2015/06/the-distributed-system-toolkit-patterns/) explains common layouts for Pods with more than one container.\n* Read about [Pod topology spread constraints](/docs/concepts/scheduling-eviction/topology-spread-constraints/)  \nTo understand the context for why Kubernetes wraps a common Pod API in other resources (such as {{< glossary_tooltip text=\"StatefulSets\" term_id=\"statefulset\" >}} or {{< glossary_tooltip text=\"Deployments\" term_id=\"deployment\" >}}), you can read about the prior art, including:  \n* [Aurora](https://aurora.apache.org/documentation/latest/reference/configuration/#job-schema)\n* [Borg](https://research.google.com/pubs/pub43438.html)\n* [Marathon](https://github.com/d2iq-archive/marathon)\n* [Omega](https://research.google/pubs/pub41684/)\n* [Tupperware](https://engineering.fb.com/data-center-engineering/tupperware/).\n", "relevant_passages": ["How can I learn about the lifecycle of a Pod in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What are the possible final phases a Pod can enter after Running?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Pod Lifecycle\ncontent_type: concept\nweight: 30\n---  \n<!-- overview -->  \nThis page describes the lifecycle of a Pod. Pods follow a defined lifecycle, starting\nin the `Pending` [phase](#pod-phase), moving through `Running` if at least one\nof its primary containers starts OK, and then through either the `Succeeded` or\n`Failed` phases depending on whether any container in the Pod terminated in failure.  \nLike individual application containers, Pods are considered to be relatively\nephemeral (rather than durable) entities. Pods are created, assigned a unique\nID ([UID](/docs/concepts/overview/working-with-objects/names/#uids)), and scheduled\nto run on nodes where they remain until termination (according to restart policy) or\ndeletion.\nIf a {{< glossary_tooltip term_id=\"node\" >}} dies, the Pods running on (or scheduled\nto run on) that node are [marked for deletion](#pod-garbage-collection). The control\nplane marks the Pods for removal after a timeout period.  \n<!-- body -->\n", "relevant_passages": ["What are the possible final phases a Pod can enter after Running?"]}
{"query": "A user asked the following question:\nQuestion: How do I ensure my Pods are automatically replaced if they fail?\nThis is about the following runbook:\nRunbook Title: Pods and controllers\nRunbook Content: Working with PodsPods and controllersYou can use workload resources to create and manage multiple Pods for you. A controller\nfor the resource handles replication and rollout and automatic healing in case of\nPod failure. For example, if a Node fails, a controller notices that Pods on that\nNode have stopped working and creates a replacement Pod. The scheduler places the\nreplacement Pod onto a healthy Node.  \nHere are some examples of workload resources that manage one or more Pods:  \n* {{< glossary_tooltip text=\"Deployment\" term_id=\"deployment\" >}}\n* {{< glossary_tooltip text=\"StatefulSet\" term_id=\"statefulset\" >}}\n* {{< glossary_tooltip text=\"DaemonSet\" term_id=\"daemonset\" >}}\n", "relevant_passages": ["How do I ensure my Pods are automatically replaced if they fail?"]}
{"query": "A user asked the following question:\nQuestion: What factors contribute to a Pod's effective resource request/limit?\nThis is about the following runbook:\nRunbook Title: Resource sharing within containers\nRunbook Content: Resource sharing within containers{{< comment >}}\nThis section is also present in the [init containers](/docs/concepts/workloads/pods/init-containers/) page.\nIf you're editing this section, change both places.\n{{< /comment >}}  \nGiven the order of execution for init, sidecar and app containers, the following rules\nfor resource usage apply:  \n* The highest of any particular resource request or limit defined on all init\ncontainers is the *effective init request/limit*. If any resource has no\nresource limit specified this is considered as the highest limit.\n* The Pod's *effective request/limit* for a resource is the sum of\n[pod overhead](/docs/concepts/scheduling-eviction/pod-overhead/) and the higher of:\n* the sum of all non-init containers(app and sidecar containers) request/limit for a\nresource\n* the effective init request/limit for a resource\n* Scheduling is done based on effective requests/limits, which means\ninit containers can reserve resources for initialization that are not used\nduring the life of the Pod.\n* The QoS (quality of service) tier of the Pod's *effective QoS tier* is the\nQoS tier for all init, sidecar and app containers alike.  \nQuota and limits are applied based on the effective Pod request and\nlimit.\n", "relevant_passages": ["What factors contribute to a Pod's effective resource request/limit?"]}
{"query": "A user asked the following question:\nQuestion: What happens if a Pod's containers are ready but a custom condition is False?\nThis is about the following runbook:\nRunbook Title: Status for Pod readiness {#pod-readiness-status}\nRunbook Content: Pod conditionsStatus for Pod readiness {#pod-readiness-status}The `kubectl patch` command does not support patching object status.\nTo set these `status.conditions` for the Pod, applications and\n{{< glossary_tooltip term_id=\"operator-pattern\" text=\"operators\">}} should use\nthe `PATCH` action.\nYou can use a [Kubernetes client library](/docs/reference/using-api/client-libraries/) to\nwrite code that sets custom Pod conditions for Pod readiness.  \nFor a Pod that uses custom conditions, that Pod is evaluated to be ready **only**\nwhen both the following statements apply:  \n* All containers in the Pod are ready.\n* All conditions specified in `readinessGates` are `True`.  \nWhen a Pod's containers are Ready but at least one custom condition is missing or\n`False`, the kubelet sets the Pod's [condition](#pod-conditions) to `ContainersReady`.\n", "relevant_passages": ["What happens if a Pod's containers are ready but a custom condition is False?"]}
{"query": "A user asked the following question:\nQuestion: What should I read to understand native sidecar containers better?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn how to [Adopt Sidecar Containers](/docs/tutorials/configuration/pod-sidecar-containers/)\n* Read a blog post on [native sidecar containers](/blog/2023/08/25/native-sidecar-containers/).\n* Read about [creating a Pod that has an init container](/docs/tasks/configure-pod-container/configure-pod-initialization/#create-a-pod-that-has-an-init-container).\n* Learn about the [types of probes](/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe): liveness, readiness, startup probe.\n* Learn about [pod overhead](/docs/concepts/scheduling-eviction/pod-overhead/).\n", "relevant_passages": ["What should I read to understand native sidecar containers better?"]}
{"query": "A user asked the following question:\nQuestion: How do I define a Job with a sidecar container in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Jobs with sidecar containers\nRunbook Content: Sidecar containers and Pod lifecycleJobs with sidecar containersIf you define a Job that uses sidecar using Kubernetes-style init containers,\nthe sidecar container in each Pod does not prevent the Job from completing after the\nmain container has finished.  \nHere's an example of a Job with two containers, one of which is a sidecar:  \n{{% code_sample language=\"yaml\" file=\"application/job/job-sidecar.yaml\" %}}\n", "relevant_passages": ["How do I define a Job with a sidecar container in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What should I do to safely drain a node in my cluster?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Follow steps to protect your application by [configuring a Pod Disruption Budget](/docs/tasks/run-application/configure-pdb/).  \n* Learn more about [draining nodes](/docs/tasks/administer-cluster/safely-drain-node/)  \n* Learn about [updating a deployment](/docs/concepts/workloads/controllers/deployment/#updating-a-deployment)\nincluding steps to maintain its availability during the rollout.\n", "relevant_passages": ["What should I do to safely drain a node in my cluster?"]}
{"query": "A user asked the following question:\nQuestion: What happens to sidecar containers when the main application container stops?\nThis is about the following runbook:\nRunbook Title: Sidecar containers and Pod lifecycle\nRunbook Content: Sidecar containers and Pod lifecycleIf an init container is created with its `restartPolicy` set to `Always`, it will\nstart and remain running during the entire life of the Pod. This can be helpful for\nrunning supporting services separated from the main application containers.  \nIf a `readinessProbe` is specified for this init container, its result will be used\nto determine the `ready` state of the Pod.  \nSince these containers are defined as init containers, they benefit from the same\nordering and sequential guarantees as regular init containers, allowing you to mix\nsidecar containers with regular init containers for complex Pod initialization flows.  \nCompared to regular init containers, sidecars defined within `initContainers` continue to\nrun after they have started. This is important when there is more than one entry inside\n`.spec.initContainers` for a Pod. After a sidecar-style init container is running (the kubelet\nhas set the `started` status for that init container to true), the kubelet then starts the\nnext init container from the ordered `.spec.initContainers` list.\nThat status either becomes true because there is a process running in the\ncontainer and no startup probe defined, or as a result of its `startupProbe` succeeding.  \nUpon Pod [termination](/docs/concepts/workloads/pods/pod-lifecycle/#termination-with-sidecars),\nthe kubelet postpones terminating sidecar containers until the main application container has fully stopped.\nThe sidecar containers are then shut down in the opposite order of their appearance in the Pod specification.\nThis approach ensures that the sidecars remain operational, supporting other containers within the Pod,\nuntil their service is no longer required.\n", "relevant_passages": ["What happens to sidecar containers when the main application container stops?"]}
{"query": "A user asked the following question:\nQuestion: What are some examples of involuntary disruptions in a Kubernetes environment?\nThis is about the following runbook:\nRunbook Title: Voluntary and involuntary disruptions\nRunbook Content: Voluntary and involuntary disruptionsPods do not disappear until someone (a person or a controller) destroys them, or\nthere is an unavoidable hardware or system software error.  \nWe call these unavoidable cases *involuntary disruptions* to\nan application.  Examples are:  \n- a hardware failure of the physical machine backing the node\n- cluster administrator deletes VM (instance) by mistake\n- cloud provider or hypervisor failure makes VM disappear\n- a kernel panic\n- the node disappears from the cluster due to cluster network partition\n- eviction of a pod due to the node being [out-of-resources](/docs/concepts/scheduling-eviction/node-pressure-eviction/).  \nExcept for the out-of-resources condition, all these conditions\nshould be familiar to most users; they are not specific\nto Kubernetes.  \nWe call other cases *voluntary disruptions*.  These include both\nactions initiated by the application owner and those initiated by a Cluster\nAdministrator.  Typical application owner actions include:  \n- deleting the deployment or other controller that manages the pod\n- updating a deployment's pod template causing a restart\n- directly deleting a pod (e.g. by accident)  \nCluster administrator actions include:  \n- [Draining a node](/docs/tasks/administer-cluster/safely-drain-node/) for repair or upgrade.\n- Draining a node from a cluster to scale the cluster down (learn about\n[Cluster Autoscaling](https://github.com/kubernetes/autoscaler/#readme)).\n- Removing a pod from a node to permit something else to fit on that node.  \nThese actions might be taken directly by the cluster administrator, or by automation\nrun by the cluster administrator, or by your cluster hosting provider.  \nAsk your cluster administrator or consult your cloud provider or distribution documentation\nto determine if any sources of voluntary disruptions are enabled for your cluster.\nIf none are enabled, you can skip creating Pod Disruption Budgets.  \n{{< caution >}}\nNot all voluntary disruptions are constrained by Pod Disruption Budgets. For example,\ndeleting deployments or pods bypasses Pod Disruption Budgets.\n{{< /caution >}}\n", "relevant_passages": ["What are some examples of involuntary disruptions in a Kubernetes environment?"]}
{"query": "A user asked the following question:\nQuestion: What happens when there aren't enough resources on a Node in Kubernetes?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Pod Quality of Service Classes\ncontent_type: concept\nweight: 85\n---  \n<!-- overview -->  \nThis page introduces _Quality of Service (QoS) classes_ in Kubernetes, and explains\nhow Kubernetes assigns a QoS class to each Pod as a consequence of the resource\nconstraints that you specify for the containers in that Pod. Kubernetes relies on this\nclassification to make decisions about which Pods to evict when there are not enough\navailable resources on a Node.  \n<!-- body -->\n", "relevant_passages": ["What happens when there aren't enough resources on a Node in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What should I do next if I want to implement user namespaces in my pod setup?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Take a look at [Use a User Namespace With a Pod](/docs/tasks/configure-pod-container/user-namespaces/)\n", "relevant_passages": ["What should I do next if I want to implement user namespaces in my pod setup?"]}
{"query": "A user asked the following question:\nQuestion: How can I wait for a service to be created using init containers?\nThis is about the following runbook:\nRunbook Title: Examples\nRunbook Content: Using init containersExamplesHere are some ideas for how to use init containers:  \n* Wait for a {{< glossary_tooltip text=\"Service\" term_id=\"service\">}} to\nbe created, using a shell one-line command like:\n```shell\nfor i in {1..100}; do sleep 1; if nslookup myservice; then exit 0; fi; done; exit 1\n```  \n* Register this Pod with a remote server from the downward API with a command like:\n```shell\ncurl -X POST http://$MANAGEMENT_SERVICE_HOST:$MANAGEMENT_SERVICE_PORT/register -d 'instance=$(<POD_NAME>)&ip=$(<POD_IP>)'\n```  \n* Wait for some time before starting the app container with a command like\n```shell\nsleep 60\n```  \n* Clone a Git repository into a {{< glossary_tooltip text=\"Volume\" term_id=\"volume\" >}}  \n* Place values into a configuration file and run a template tool to dynamically\ngenerate a configuration file for the main app container. For example,\nplace the `POD_IP` value in a configuration and generate the main app\nconfiguration file using Jinja.  \n#### Init containers in use  \nThis example defines a simple Pod that has two init containers.\nThe first waits for `myservice`, and the second waits for `mydb`. Once both\ninit containers complete, the Pod runs the app container from its `spec` section.  \n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\nname: myapp-pod\nlabels:\napp.kubernetes.io/name: MyApp\nspec:\ncontainers:\n- name: myapp-container\nimage: busybox:1.28\ncommand: ['sh', '-c', 'echo The app is running! && sleep 3600']\ninitContainers:\n- name: init-myservice\nimage: busybox:1.28\ncommand: ['sh', '-c', \"until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done\"]\n- name: init-mydb\nimage: busybox:1.28\ncommand: ['sh', '-c', \"until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done\"]\n```  \nYou can start this Pod by running:  \n```shell\nkubectl apply -f myapp.yaml\n```\nThe output is similar to this:\n```\npod/myapp-pod created\n```  \nAnd check on its status with:\n```shell\nkubectl get -f myapp.yaml\n```\nThe output is similar to this:\n```\nNAME        READY     STATUS     RESTARTS   AGE\nmyapp-pod   0/1       Init:0/2   0          6m\n```  \nor for more details:\n```shell\nkubectl describe -f myapp.yaml\n```\nThe output is similar to this:\n```\nName:          myapp-pod\nNamespace:     default\n[...]\nLabels:        app.kubernetes.io/name=MyApp\nStatus:        Pending\n[...]\nInit Containers:\ninit-myservice:\n[...]\nState:         Running\n[...]\ninit-mydb:\n[...]\nState:         Waiting\nReason:      PodInitializing\nReady:         False\n[...]\nContainers:\nmyapp-container:\n[...]\nState:         Waiting\nReason:      PodInitializing\nReady:         False\n[...]\nEvents:\nFirstSeen    LastSeen    Count    From                      SubObjectPath                           Type          Reason        Message\n---------    --------    -----    ----                      -------------                           --------      ------        -------\n16s          16s         1        {default-scheduler }                                              Normal        Scheduled     Successfully assigned myapp-pod to 172.17.4.201\n16s          16s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulling       pulling image \"busybox\"\n13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulled        Successfully pulled image \"busybox\"\n13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Created       Created container init-myservice\n13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Started       Started container init-myservice\n```  \nTo see logs for the init containers in this Pod, run:\n```shell\nkubectl logs myapp-pod -c init-myservice # Inspect the first init container\nkubectl logs myapp-pod -c init-mydb      # Inspect the second init container\n```  \nAt this point, those init containers will be waiting to discover {{< glossary_tooltip text=\"Services\" term_id=\"service\" >}} named\n`mydb` and `myservice`.  \nHere's a configuration you can use to make those Services appear:  \n```yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: myservice\nspec:\nports:\n- protocol: TCP\nport: 80\ntargetPort: 9376\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: mydb\nspec:\nports:\n- protocol: TCP\nport: 80\ntargetPort: 9377\n```  \nTo create the `mydb` and `myservice` services:  \n```shell\nkubectl apply -f services.yaml\n```\nThe output is similar to this:\n```\nservice/myservice created\nservice/mydb created\n```  \nYou'll then see that those init containers complete, and that the `myapp-pod`\nPod moves into the Running state:  \n```shell\nkubectl get -f myapp.yaml\n```\nThe output is similar to this:\n```\nNAME        READY     STATUS    RESTARTS   AGE\nmyapp-pod   1/1       Running   0          9m\n```  \nThis simple example should provide some inspiration for you to create your own\ninit containers. [What's next](#what-s-next) contains a link to a more detailed example.\n", "relevant_passages": ["How can I wait for a service to be created using init containers?"]}
{"query": "A user asked the following question:\nQuestion: Can I prevent involuntary disruptions with a PodDisruptionBudget?\nThis is about the following runbook:\nRunbook Title: Pod disruption budgets\nRunbook Content: Pod disruption budgets{{< feature-state for_k8s_version=\"v1.21\" state=\"stable\" >}}  \nKubernetes offers features to help you run highly available applications even when you\nintroduce frequent voluntary disruptions.  \nAs an application owner, you can create a PodDisruptionBudget (PDB) for each application.\nA PDB limits the number of Pods of a replicated application that are down simultaneously from\nvoluntary disruptions. For example, a quorum-based application would\nlike to ensure that the number of replicas running is never brought below the\nnumber needed for a quorum. A web front end might want to\nensure that the number of replicas serving load never falls below a certain\npercentage of the total.  \nCluster managers and hosting providers should use tools which\nrespect PodDisruptionBudgets by calling the [Eviction API](/docs/tasks/administer-cluster/safely-drain-node/#eviction-api)\ninstead of directly deleting pods or deployments.  \nFor example, the `kubectl drain` subcommand lets you mark a node as going out of\nservice. When you run `kubectl drain`, the tool tries to evict all of the Pods on\nthe Node you're taking out of service. The eviction request that `kubectl` submits on\nyour behalf may be temporarily rejected, so the tool periodically retries all failed\nrequests until all Pods on the target node are terminated, or until a configurable timeout\nis reached.  \nA PDB specifies the number of replicas that an application can tolerate having, relative to how\nmany it is intended to have.  For example, a Deployment which has a `.spec.replicas: 5` is\nsupposed to have 5 pods at any given time.  If its PDB allows for there to be 4 at a time,\nthen the Eviction API will allow voluntary disruption of one (but not two) pods at a time.  \nThe group of pods that comprise the application is specified using a label selector, the same\nas the one used by the application's controller (deployment, stateful-set, etc).  \nThe \"intended\" number of pods is computed from the `.spec.replicas` of the workload resource\nthat is managing those pods. The control plane discovers the owning workload resource by\nexamining the `.metadata.ownerReferences` of the Pod.  \n[Involuntary disruptions](#voluntary-and-involuntary-disruptions) cannot be prevented by PDBs; however they\ndo count against the budget.  \nPods which are deleted or unavailable due to a rolling upgrade to an application do count\nagainst the disruption budget, but workload resources (such as Deployment and StatefulSet)\nare not limited by PDBs when doing rolling upgrades. Instead, the handling of failures\nduring application updates is configured in the spec for the specific workload resource.  \nIt is recommended to set `AlwaysAllow` [Unhealthy Pod Eviction Policy](/docs/tasks/run-application/configure-pdb/#unhealthy-pod-eviction-policy)\nto your PodDisruptionBudgets to support eviction of misbehaving applications during a node drain.\nThe default behavior is to wait for the application pods to become [healthy](/docs/tasks/run-application/configure-pdb/#healthiness-of-a-pod)\nbefore the drain can proceed.  \nWhen a pod is evicted using the eviction API, it is gracefully\n[terminated](/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination), honoring the\n`terminationGracePeriodSeconds` setting in its [PodSpec](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#podspec-v1-core).\n", "relevant_passages": ["Can I prevent involuntary disruptions with a PodDisruptionBudget?"]}
{"query": "A user asked the following question:\nQuestion: What could cause a Pod to restart unexpectedly?\nThis is about the following runbook:\nRunbook Title: Pod restart reasons\nRunbook Content: Detailed behaviorPod restart reasonsA Pod can restart, causing re-execution of init containers, for the following\nreasons:  \n* The Pod infrastructure container is restarted. This is uncommon and would\nhave to be done by someone with root access to nodes.\n* All containers in a Pod are terminated while `restartPolicy` is set to Always,\nforcing a restart, and the init container completion record has been lost due\nto {{< glossary_tooltip text=\"garbage collection\" term_id=\"garbage-collection\" >}}.  \nThe Pod will not be restarted when the init container image is changed, or the\ninit container completion record has been lost due to garbage collection. This\napplies for Kubernetes v1.20 and later. If you are using an earlier version of\nKubernetes, consult the documentation for the version you are using.\n", "relevant_passages": ["What could cause a Pod to restart unexpectedly?"]}
{"query": "A user asked the following question:\nQuestion: What is a probe in the context of container management?\nThis is about the following runbook:\nRunbook Title: Container probes\nRunbook Content: Container probesA _probe_ is a diagnostic performed periodically by the [kubelet](/docs/reference/command-line-tools-reference/kubelet/)\non a container. To perform a diagnostic, the kubelet either executes code within the container,\nor makes a network request.\n", "relevant_passages": ["What is a probe in the context of container management?"]}
{"query": "A user asked the following question:\nQuestion: What role does QoS classification play in Kubernetes?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Pod Quality of Service Classes\ncontent_type: concept\nweight: 85\n---  \n<!-- overview -->  \nThis page introduces _Quality of Service (QoS) classes_ in Kubernetes, and explains\nhow Kubernetes assigns a QoS class to each Pod as a consequence of the resource\nconstraints that you specify for the containers in that Pod. Kubernetes relies on this\nclassification to make decisions about which Pods to evict when there are not enough\navailable resources on a Node.  \n<!-- body -->\n", "relevant_passages": ["What role does QoS classification play in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What happens to a Pod after it's created?\nThis is about the following runbook:\nRunbook Title: Working with Pods\nRunbook Content: Working with PodsYou'll rarely create individual Pods directly in Kubernetes\u2014even singleton Pods. This\nis because Pods are designed as relatively ephemeral, disposable entities. When\na Pod gets created (directly by you, or indirectly by a\n{{< glossary_tooltip text=\"controller\" term_id=\"controller\" >}}), the new Pod is\nscheduled to run on a {{< glossary_tooltip term_id=\"node\" >}} in your cluster.\nThe Pod remains on that node until the Pod finishes execution, the Pod object is deleted,\nthe Pod is *evicted* for lack of resources, or the node fails.  \n{{< note >}}\nRestarting a container in a Pod should not be confused with restarting a Pod. A Pod\nis not a process, but an environment for running container(s). A Pod persists until\nit is deleted.\n{{< /note >}}  \nThe name of a Pod must be a valid\n[DNS subdomain](/docs/concepts/overview/working-with-objects/names#dns-subdomain-names)\nvalue, but this can produce unexpected results for the Pod hostname.  For best compatibility,\nthe name should follow the more restrictive rules for a\n[DNS label](/docs/concepts/overview/working-with-objects/names#dns-label-names).\n", "relevant_passages": ["What happens to a Pod after it's created?"]}
{"query": "A user asked the following question:\nQuestion: If a probe result is 'Failure', what does that indicate?\nThis is about the following runbook:\nRunbook Title: Probe outcome\nRunbook Content: Container probesProbe outcomeEach probe has one of three results:  \n`Success`\n: The container passed the diagnostic.  \n`Failure`\n: The container failed the diagnostic.  \n`Unknown`\n: The diagnostic failed (no action should be taken, and the kubelet\nwill make further checks).\n", "relevant_passages": ["If a probe result is 'Failure', what does that indicate?"]}
{"query": "A user asked the following question:\nQuestion: What does the kubelet do when the grace period expires?\nThis is about the following runbook:\nRunbook Title: Termination of Pods {#pod-termination}\nRunbook Content: Termination of Pods {#pod-termination}Because Pods represent processes running on nodes in the cluster, it is important to\nallow those processes to gracefully terminate when they are no longer needed (rather\nthan being abruptly stopped with a `KILL` signal and having no chance to clean up).  \nThe design aim is for you to be able to request deletion and know when processes\nterminate, but also be able to ensure that deletes eventually complete.\nWhen you request deletion of a Pod, the cluster records and tracks the intended grace period\nbefore the Pod is allowed to be forcefully killed. With that forceful shutdown tracking in\nplace, the {{< glossary_tooltip text=\"kubelet\" term_id=\"kubelet\" >}} attempts graceful\nshutdown.  \nTypically, with this graceful termination of the pod, kubelet makes requests to the container runtime to attempt to stop the containers in the pod by first sending a TERM (aka. SIGTERM) signal, with a grace period timeout, to the main process in each container. The requests to stop the containers are processed by the container runtime asynchronously. There is no guarantee to the order of processing for these requests. Many container runtimes respect the `STOPSIGNAL` value defined in the container image and, if different, send the container image configured STOPSIGNAL instead of TERM.\nOnce the grace period has expired, the KILL signal is sent to any remaining\nprocesses, and the Pod is then deleted from the\n{{< glossary_tooltip text=\"API Server\" term_id=\"kube-apiserver\" >}}. If the kubelet or the\ncontainer runtime's management service is restarted while waiting for processes to terminate, the\ncluster retries from the start including the full original grace period.  \nPod termination flow, illustrated with an example:  \n1. You use the `kubectl` tool to manually delete a specific Pod, with the default grace period\n(30 seconds).  \n1. The Pod in the API server is updated with the time beyond which the Pod is considered \"dead\"\nalong with the grace period.\nIf you use `kubectl describe` to check the Pod you're deleting, that Pod shows up as \"Terminating\".\nOn the node where the Pod is running: as soon as the kubelet sees that a Pod has been marked\nas terminating (a graceful shutdown duration has been set), the kubelet begins the local Pod\nshutdown process.  \n1. If one of the Pod's containers has defined a `preStop`\n[hook](/docs/concepts/containers/container-lifecycle-hooks) and the `terminationGracePeriodSeconds`\nin the Pod spec is not set to 0, the kubelet runs that hook inside of the container.\nThe default `terminationGracePeriodSeconds` setting is 30 seconds.  \nIf the `preStop` hook is still running after the grace period expires, the kubelet requests\na small, one-off grace period extension of 2 seconds.\n{{% note %}}\nIf the `preStop` hook needs longer to complete than the default grace period allows,\nyou must modify `terminationGracePeriodSeconds` to suit this.\n{{% /note %}}  \n1. The kubelet triggers the container runtime to send a TERM signal to process 1 inside each\ncontainer.  \nThere is [special ordering](#termination-with-sidecars) if the Pod has any\n{{< glossary_tooltip text=\"sidecar containers\" term_id=\"sidecar-container\" >}} defined.\nOtherwise, the containers in the Pod receive the TERM signal at different times and in\nan arbitrary order. If the order of shutdowns matters, consider using a `preStop` hook\nto synchronize (or switch to using sidecar containers).  \n1. At the same time as the kubelet is starting graceful shutdown of the Pod, the control plane\nevaluates whether to remove that shutting-down Pod from EndpointSlice (and Endpoints) objects,\nwhere those objects represent a {{< glossary_tooltip term_id=\"service\" text=\"Service\" >}}\nwith a configured {{< glossary_tooltip text=\"selector\" term_id=\"selector\" >}}.\n{{< glossary_tooltip text=\"ReplicaSets\" term_id=\"replica-set\" >}} and other workload resources\nno longer treat the shutting-down Pod as a valid, in-service replica.  \nPods that shut down slowly should not continue to serve regular traffic and should start\nterminating and finish processing open connections.  Some applications need to go beyond\nfinishing open connections and need more graceful termination, for example, session draining\nand completion.  \nAny endpoints that represent the terminating Pods are not immediately removed from\nEndpointSlices, and a status indicating [terminating state](/docs/concepts/services-networking/endpoint-slices/#conditions)\nis exposed from the EndpointSlice API (and the legacy Endpoints API).\nTerminating endpoints always have their `ready` status as `false` (for backward compatibility\nwith versions before 1.26), so load balancers will not use it for regular traffic.  \nIf traffic draining on terminating Pod is needed, the actual readiness can be checked as a\ncondition `serving`.  You can find more details on how to implement connections draining in the\ntutorial [Pods And Endpoints Termination Flow](/docs/tutorials/services/pods-and-endpoint-termination-flow/)  \n<a id=\"pod-termination-beyond-grace-period\" />  \n1. The kubelet ensures the Pod is shut down and terminated\n1. When the grace period expires, if there is still any container running in the Pod, the\nkubelet triggers forcible shutdown.\nThe container runtime sends `SIGKILL` to any processes still running in any container in the Pod.\nThe kubelet also cleans up a hidden `pause` container if that container runtime uses one.\n1. The kubelet transitions the Pod into a terminal phase (`Failed` or `Succeeded` depending on\nthe end state of its containers).\n1. The kubelet triggers forcible removal of the Pod object from the API server, by setting grace period\nto 0 (immediate deletion).\n1. The API server deletes the Pod's API object, which is then no longer visible from any client.\n", "relevant_passages": ["What does the kubelet do when the grace period expires?"]}
{"query": "A user asked the following question:\nQuestion: What tool is responsible for running container probes?\nThis is about the following runbook:\nRunbook Title: Container probes\nRunbook Content: Container probesA _probe_ is a diagnostic performed periodically by the [kubelet](/docs/reference/command-line-tools-reference/kubelet/)\non a container. To perform a diagnostic, the kubelet either executes code within the container,\nor makes a network request.\n", "relevant_passages": ["What tool is responsible for running container probes?"]}
{"query": "A user asked the following question:\nQuestion: How does Kubernetes handle container faults within a Pod?\nThis is about the following runbook:\nRunbook Title: Pod lifetime\nRunbook Content: Pod lifetimeWhilst a Pod is running, the kubelet is able to restart containers to handle some\nkind of faults. Within a Pod, Kubernetes tracks different container\n[states](#container-states) and determines what action to take to make the Pod\nhealthy again.  \nIn the Kubernetes API, Pods have both a specification and an actual status. The\nstatus for a Pod object consists of a set of [Pod conditions](#pod-conditions).\nYou can also inject [custom readiness information](#pod-readiness-gate) into the\ncondition data for a Pod, if that is useful to your application.  \nPods are only [scheduled](/docs/concepts/scheduling-eviction/) once in their lifetime;\nassigning a Pod to a specific node is called _binding_, and the process of selecting\nwhich node to use is called _scheduling_.\nOnce a Pod has been scheduled and is bound to a node, Kubernetes tries\nto run that Pod on the node. The Pod runs on that node until it stops, or until the Pod\nis [terminated](#pod-termination); if Kubernetes isn't able to start the Pod on the selected\nnode (for example, if the node crashes before the Pod starts), then that particular Pod\nnever starts.  \nYou can use [Pod Scheduling Readiness](/docs/concepts/scheduling-eviction/pod-scheduling-readiness/)\nto delay scheduling for a Pod until all its _scheduling gates_ are removed. For example,\nyou might want to define a set of Pods but only trigger scheduling once all the Pods\nhave been created.\n", "relevant_passages": ["How does Kubernetes handle container faults within a Pod?"]}
{"query": "A user asked the following question:\nQuestion: What do sidecar containers do in relation to app containers?\nThis is about the following runbook:\nRunbook Title: Differences from application containers\nRunbook Content: Differences from application containersSidecar containers run alongside _app containers_ in the same pod. However, they do not\nexecute the primary application logic; instead, they provide supporting functionality to\nthe main application.  \nSidecar containers have their own independent lifecycles. They can be started, stopped,\nand restarted independently of app containers. This means you can update, scale, or\nmaintain sidecar containers without affecting the primary application.  \nSidecar containers share the same network and storage namespaces with the primary\ncontainer. This co-location allows them to interact closely and share resources.  \nFrom Kubernetes perspective, sidecars graceful termination is less important.\nWhen other containers took all alloted graceful termination time, sidecar containers\nwill receive the `SIGTERM` following with `SIGKILL` faster than may be expected.\nSo exit codes different from `0` (`0` indicates successful exit), for sidecar containers are normal\non Pod termination and should be generally ignored by the external tooling.\n", "relevant_passages": ["What do sidecar containers do in relation to app containers?"]}
{"query": "A user asked the following question:\nQuestion: What happens if I try to drain a node when only 2 pods are available?\nThis is about the following runbook:\nRunbook Title: PodDisruptionBudget example {#pdb-example}\nRunbook Content: PodDisruptionBudget example {#pdb-example}Consider a cluster with 3 nodes, `node-1` through `node-3`.\nThe cluster is running several applications.  One of them has 3 replicas initially called\n`pod-a`, `pod-b`, and `pod-c`.  Another, unrelated pod without a PDB, called `pod-x`, is also shown.\nInitially, the pods are laid out as follows:  \n|       node-1         |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *available*   | pod-b *available*   | pod-c *available*  |\n| pod-x  *available*   |                     |                    |  \nAll 3 pods are part of a deployment, and they collectively have a PDB which requires\nthere be at least 2 of the 3 pods to be available at all times.  \nFor example, assume the cluster administrator wants to reboot into a new kernel version to fix a bug in the kernel.\nThe cluster administrator first tries to drain `node-1` using the `kubectl drain` command.\nThat tool tries to evict `pod-a` and `pod-x`.  This succeeds immediately.\nBoth pods go into the `terminating` state at the same time.\nThis puts the cluster in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* |                     |                    |  \nThe deployment notices that one of the pods is terminating, so it creates a replacement\ncalled `pod-d`.  Since `node-1` is cordoned, it lands on another node.  Something has\nalso created `pod-y` as a replacement for `pod-x`.  \n(Note: for a StatefulSet, `pod-a`, which would be called something like `pod-0`, would need\nto terminate completely before its replacement, which is also called `pod-0` but has a\ndifferent UID, could be created.  Otherwise, the example applies to a StatefulSet as well.)  \nNow the cluster is in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* | pod-d *starting*    | pod-y              |  \nAt some point, the pods terminate, and the cluster looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *starting*    | pod-y              |  \nAt this point, if an impatient cluster administrator tries to drain `node-2` or\n`node-3`, the drain command will block, because there are only 2 available\npods for the deployment, and its PDB requires at least 2.  After some time passes, `pod-d` becomes available.  \nThe cluster state now looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *available*   | pod-y              |  \nNow, the cluster administrator tries to drain `node-2`.\nThe drain command will try to evict the two pods in some order, say\n`pod-b` first and then `pod-d`.  It will succeed at evicting `pod-b`.\nBut, when it tries to evict `pod-d`, it will be refused because that would leave only\none pod available for the deployment.  \nThe deployment creates a replacement for `pod-b` called `pod-e`.\nBecause there are not enough resources in the cluster to schedule\n`pod-e` the drain will again block.  The cluster may end up in this\nstate:  \n|    node-1 *drained*  |       node-2        |       node-3       | *no node*          |\n|:--------------------:|:-------------------:|:------------------:|:------------------:|\n|                      | pod-b *terminating* | pod-c *available*  | pod-e *pending*    |\n|                      | pod-d *available*   | pod-y              |                    |  \nAt this point, the cluster administrator needs to\nadd a node back to the cluster to proceed with the upgrade.  \nYou can see how Kubernetes varies the rate at which disruptions\ncan happen, according to:  \n- how many replicas an application needs\n- how long it takes to gracefully shutdown an instance\n- how long it takes a new instance to start up\n- the type of controller\n- the cluster's resource capacity\n", "relevant_passages": ["What happens if I try to drain a node when only 2 pods are available?"]}
{"query": "A user asked the following question:\nQuestion: What should application owners know about disruptions to Pods?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- erictune\n- foxish\n- davidopp\ntitle: Disruptions\ncontent_type: concept\nweight: 70\n---  \n<!-- overview -->\nThis guide is for application owners who want to build\nhighly available applications, and thus need to understand\nwhat types of disruptions can happen to Pods.  \nIt is also for cluster administrators who want to perform automated\ncluster actions, like upgrading and autoscaling clusters.  \n<!-- body -->\n", "relevant_passages": ["What should application owners know about disruptions to Pods?"]}
{"query": "A user asked the following question:\nQuestion: How do I add init containers to my Pod?\nThis is about the following runbook:\nRunbook Title: Understanding init containers\nRunbook Content: Understanding init containersA {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}} can have multiple containers\nrunning apps within it, but it can also have one or more init containers, which are run\nbefore the app containers are started.  \nInit containers are exactly like regular containers, except:  \n* Init containers always run to completion.\n* Each init container must complete successfully before the next one starts.  \nIf a Pod's init container fails, the kubelet repeatedly restarts that init container until it succeeds.\nHowever, if the Pod has a `restartPolicy` of Never, and an init container fails during startup of that Pod, Kubernetes treats the overall Pod as failed.  \nTo specify an init container for a Pod, add the `initContainers` field into\nthe [Pod specification](/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec),\nas an array of `container` items (similar to the app `containers` field and its contents).\nSee [Container](/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container) in the\nAPI reference for more details.  \nThe status of the init containers is returned in `.status.initContainerStatuses`\nfield as an array of the container statuses (similar to the `.status.containerStatuses`\nfield).\n", "relevant_passages": ["How do I add init containers to my Pod?"]}
{"query": "A user asked the following question:\nQuestion: What should I use if my Pods need to track state?\nThis is about the following runbook:\nRunbook Title: Workload resources for managing pods\nRunbook Content: Using PodsWorkload resources for managing podsUsually you don't need to create Pods directly, even singleton Pods. Instead, create them using workload resources such as {{< glossary_tooltip text=\"Deployment\"\nterm_id=\"deployment\" >}} or {{< glossary_tooltip text=\"Job\" term_id=\"job\" >}}.\nIf your Pods need to track state, consider the\n{{< glossary_tooltip text=\"StatefulSet\" term_id=\"statefulset\" >}} resource.  \nEach Pod is meant to run a single instance of a given application. If you want to\nscale your application horizontally (to provide more overall resources by running\nmore instances), you should use multiple Pods, one for each instance. In\nKubernetes, this is typically referred to as _replication_.\nReplicated Pods are usually created and managed as a group by a workload resource\nand its {{< glossary_tooltip text=\"controller\" term_id=\"controller\" >}}.  \nSee [Pods and controllers](#pods-and-controllers) for more information on how\nKubernetes uses workload resources, and their controllers, to implement application\nscaling and auto-healing.  \nPods natively provide two kinds of shared resources for their constituent containers:\n[networking](#pod-networking) and [storage](#pod-storage).\n", "relevant_passages": ["What should I use if my Pods need to track state?"]}
{"query": "A user asked the following question:\nQuestion: What exactly is a Pod in Kubernetes?\nThis is about the following runbook:\nRunbook Title: What is a Pod?\nRunbook Content: What is a Pod?{{< note >}}\nYou need to install a [container runtime](/docs/setup/production-environment/container-runtimes/)\ninto each node in the cluster so that Pods can run there.\n{{< /note >}}  \nThe shared context of a Pod is a set of Linux namespaces, cgroups, and\npotentially other facets of isolation - the same things that isolate a {{< glossary_tooltip text=\"container\" term_id=\"container\" >}}. Within a Pod's context, the individual applications may have\nfurther sub-isolations applied.  \nA Pod is similar to a set of containers with shared namespaces and shared filesystem volumes.  \nPods in a Kubernetes cluster are used in two main ways:  \n* **Pods that run a single container**. The \"one-container-per-Pod\" model is the\nmost common Kubernetes use case; in this case, you can think of a Pod as a\nwrapper around a single container; Kubernetes manages Pods rather than managing\nthe containers directly.\n* **Pods that run multiple containers that need to work together**. A Pod can\nencapsulate an application composed of\n[multiple co-located containers](#how-pods-manage-multiple-containers) that are\ntightly coupled and need to share resources. These co-located containers\nform a single cohesive unit.  \nGrouping multiple co-located and co-managed containers in a single Pod is a\nrelatively advanced use case. You should use this pattern only in specific\ninstances in which your containers are tightly coupled.  \nYou don't need to run multiple containers to provide replication (for resilience\nor capacity); if you need multiple replicas, see\n[Workload management](/docs/concepts/workloads/controllers/).\n", "relevant_passages": ["What exactly is a Pod in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What's the difference between restarting a container and restarting a Pod?\nThis is about the following runbook:\nRunbook Title: Working with Pods\nRunbook Content: Working with PodsYou'll rarely create individual Pods directly in Kubernetes\u2014even singleton Pods. This\nis because Pods are designed as relatively ephemeral, disposable entities. When\na Pod gets created (directly by you, or indirectly by a\n{{< glossary_tooltip text=\"controller\" term_id=\"controller\" >}}), the new Pod is\nscheduled to run on a {{< glossary_tooltip term_id=\"node\" >}} in your cluster.\nThe Pod remains on that node until the Pod finishes execution, the Pod object is deleted,\nthe Pod is *evicted* for lack of resources, or the node fails.  \n{{< note >}}\nRestarting a container in a Pod should not be confused with restarting a Pod. A Pod\nis not a process, but an environment for running container(s). A Pod persists until\nit is deleted.\n{{< /note >}}  \nThe name of a Pod must be a valid\n[DNS subdomain](/docs/concepts/overview/working-with-objects/names#dns-subdomain-names)\nvalue, but this can produce unexpected results for the Pod hostname.  For best compatibility,\nthe name should follow the more restrictive rules for a\n[DNS label](/docs/concepts/overview/working-with-objects/names#dns-label-names).\n", "relevant_passages": ["What's the difference between restarting a container and restarting a Pod?"]}
{"query": "A user asked the following question:\nQuestion: What resources can I use to manage multiple Pods?\nThis is about the following runbook:\nRunbook Title: Pods and controllers\nRunbook Content: Working with PodsPods and controllersYou can use workload resources to create and manage multiple Pods for you. A controller\nfor the resource handles replication and rollout and automatic healing in case of\nPod failure. For example, if a Node fails, a controller notices that Pods on that\nNode have stopped working and creates a replacement Pod. The scheduler places the\nreplacement Pod onto a healthy Node.  \nHere are some examples of workload resources that manage one or more Pods:  \n* {{< glossary_tooltip text=\"Deployment\" term_id=\"deployment\" >}}\n* {{< glossary_tooltip text=\"StatefulSet\" term_id=\"statefulset\" >}}\n* {{< glossary_tooltip text=\"DaemonSet\" term_id=\"daemonset\" >}}\n", "relevant_passages": ["What resources can I use to manage multiple Pods?"]}
{"query": "A user asked the following question:\nQuestion: What is the Kubernetes version that supports ephemeral containers?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- verb\n- yujuhong\ntitle: Ephemeral Containers\ncontent_type: concept\nweight: 60\n---  \n<!-- overview -->  \n{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nThis page provides an overview of ephemeral containers: a special type of container\nthat runs temporarily in an existing {{< glossary_tooltip term_id=\"pod\" >}} to\naccomplish user-initiated actions such as troubleshooting. You use ephemeral\ncontainers to inspect services rather than to build applications.  \n<!-- body -->\n", "relevant_passages": ["What is the Kubernetes version that supports ephemeral containers?"]}
{"query": "A user asked the following question:\nQuestion: How do Pods facilitate communication between containers?\nThis is about the following runbook:\nRunbook Title: Resource sharing and communication\nRunbook Content: Resource sharing and communicationPods enable data sharing and communication among their constituent\ncontainers.\n", "relevant_passages": ["How do Pods facilitate communication between containers?"]}
{"query": "A user asked the following question:\nQuestion: How do I create a Pod with the nginx image?\nThis is about the following runbook:\nRunbook Title: Using Pods\nRunbook Content: Using PodsThe following is an example of a Pod which consists of a container running the image `nginx:1.14.2`.  \n{{% code_sample file=\"pods/simple-pod.yaml\" %}}  \nTo create the Pod shown above, run the following command:\n```shell\nkubectl apply -f https://k8s.io/examples/pods/simple-pod.yaml\n```  \nPods are generally not created directly and are created using workload resources.\nSee [Working with Pods](#working-with-pods) for more information on how Pods are used\nwith workload resources.\n", "relevant_passages": ["How do I create a Pod with the nginx image?"]}
{"query": "A user asked the following question:\nQuestion: What does a Deployment with a sidecar container look like in YAML?\nThis is about the following runbook:\nRunbook Title: Example application {#sidecar-example}\nRunbook Content: Sidecar containers in Kubernetes {#pod-sidecar-containers}Example application {#sidecar-example}Here's an example of a Deployment with two containers, one of which is a sidecar:  \n{{% code_sample language=\"yaml\" file=\"application/deployment-sidecar.yaml\" %}}\n", "relevant_passages": ["What does a Deployment with a sidecar container look like in YAML?"]}
{"query": "A user asked the following question:\nQuestion: Will the sidecar container affect the completion of the Job?\nThis is about the following runbook:\nRunbook Title: Jobs with sidecar containers\nRunbook Content: Sidecar containers and Pod lifecycleJobs with sidecar containersIf you define a Job that uses sidecar using Kubernetes-style init containers,\nthe sidecar container in each Pod does not prevent the Job from completing after the\nmain container has finished.  \nHere's an example of a Job with two containers, one of which is a sidecar:  \n{{% code_sample language=\"yaml\" file=\"application/job/job-sidecar.yaml\" %}}\n", "relevant_passages": ["Will the sidecar container affect the completion of the Job?"]}
{"query": "A user asked the following question:\nQuestion: How can I classify a Pod as BestEffort?\nThis is about the following runbook:\nRunbook Title: BestEffort\nRunbook Content: Quality of Service classesBestEffortPods in the `BestEffort` QoS class can use node resources that aren't specifically assigned\nto Pods in other QoS classes. For example, if you have a node with 16 CPU cores available to the\nkubelet, and you assign 4 CPU cores to a `Guaranteed` Pod, then a Pod in the `BestEffort`\nQoS class can try to use any amount of the remaining 12 CPU cores.  \nThe kubelet prefers to evict `BestEffort` Pods if the node comes under resource pressure.  \n#### Criteria  \nA Pod has a QoS class of `BestEffort` if it doesn't meet the criteria for either `Guaranteed`\nor `Burstable`. In other words, a Pod is `BestEffort` only if none of the Containers in the Pod have a\nmemory limit or a memory request, and none of the Containers in the Pod have a\nCPU limit or a CPU request.\nContainers in a Pod can request other resources (not CPU or memory) and still be classified as\n`BestEffort`.\n", "relevant_passages": ["How can I classify a Pod as BestEffort?"]}
{"query": "A user asked the following question:\nQuestion: What does it mean if a Pod's status is 'PodScheduled'?\nThis is about the following runbook:\nRunbook Title: Pod conditions\nRunbook Content: Pod conditionsA Pod has a PodStatus, which has an array of\n[PodConditions](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#podcondition-v1-core)\nthrough which the Pod has or has not passed. Kubelet manages the following\nPodConditions:  \n* `PodScheduled`: the Pod has been scheduled to a node.\n* `PodReadyToStartContainers`: (beta feature; enabled by [default](#pod-has-network)) the\nPod sandbox has been successfully created and networking configured.\n* `ContainersReady`: all containers in the Pod are ready.\n* `Initialized`: all [init containers](/docs/concepts/workloads/pods/init-containers/)\nhave completed successfully.\n* `Ready`: the Pod is able to serve requests and should be added to the load\nbalancing pools of all matching Services.  \nField name           | Description\n:--------------------|:-----------\n`type`               | Name of this Pod condition.\n`status`             | Indicates whether that condition is applicable, with possible values \"`True`\", \"`False`\", or \"`Unknown`\".\n`lastProbeTime`      | Timestamp of when the Pod condition was last probed.\n`lastTransitionTime` | Timestamp for when the Pod last transitioned from one status to another.\n`reason`             | Machine-readable, UpperCamelCase text indicating the reason for the condition's last transition.\n`message`            | Human-readable message indicating details about the last status transition.\n", "relevant_passages": ["What does it mean if a Pod's status is 'PodScheduled'?"]}
{"query": "A user asked the following question:\nQuestion: How can I check the status of a Terminated container using kubectl?\nThis is about the following runbook:\nRunbook Title: `Terminated` {#container-state-terminated}\nRunbook Content: Container states`Terminated` {#container-state-terminated}A container in the `Terminated` state began execution and then either ran to\ncompletion or failed for some reason. When you use `kubectl` to query a Pod with\na container that is `Terminated`, you see a reason, an exit code, and the start and\nfinish time for that container's period of execution.  \nIf a container has a `preStop` hook configured, this hook runs before the container enters\nthe `Terminated` state.\n", "relevant_passages": ["How can I check the status of a Terminated container using kubectl?"]}
{"query": "A user asked the following question:\nQuestion: Will changing the init container image cause a Pod to restart?\nThis is about the following runbook:\nRunbook Title: Pod restart reasons\nRunbook Content: Detailed behaviorPod restart reasonsA Pod can restart, causing re-execution of init containers, for the following\nreasons:  \n* The Pod infrastructure container is restarted. This is uncommon and would\nhave to be done by someone with root access to nodes.\n* All containers in a Pod are terminated while `restartPolicy` is set to Always,\nforcing a restart, and the init container completion record has been lost due\nto {{< glossary_tooltip text=\"garbage collection\" term_id=\"garbage-collection\" >}}.  \nThe Pod will not be restarted when the init container image is changed, or the\ninit container completion record has been lost due to garbage collection. This\napplies for Kubernetes v1.20 and later. If you are using an earlier version of\nKubernetes, consult the documentation for the version you are using.\n", "relevant_passages": ["Will changing the init container image cause a Pod to restart?"]}
{"query": "A user asked the following question:\nQuestion: What's the main difference between sidecar containers and init containers in terms of their lifecycle?\nThis is about the following runbook:\nRunbook Title: Differences from init containers\nRunbook Content: Differences from init containersSidecar containers work alongside the main container, extending its functionality and\nproviding additional services.  \nSidecar containers run concurrently with the main application container. They are active\nthroughout the lifecycle of the pod and can be started and stopped independently of the\nmain container. Unlike [init containers](/docs/concepts/workloads/pods/init-containers/),\nsidecar containers support [probes](/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe) to control their lifecycle.  \nSidecar containers can interact directly with the main application containers, because\nlike init containers they always share the same network, and can optionally also share\nvolumes (filesystems).  \nInit containers stop before the main containers start up, so init containers cannot\nexchange messages with the app container in a Pod. Any data passing is one-way\n(for example, an init container can put information inside an `emptyDir` volume).\n", "relevant_passages": ["What's the main difference between sidecar containers and init containers in terms of their lifecycle?"]}
{"query": "A user asked the following question:\nQuestion: What does it mean if a container is in the Waiting state?\nThis is about the following runbook:\nRunbook Title: `Waiting` {#container-state-waiting}\nRunbook Content: Container states`Waiting` {#container-state-waiting}If a container is not in either the `Running` or `Terminated` state, it is `Waiting`.\nA container in the `Waiting` state is still running the operations it requires in\norder to complete start up: for example, pulling the container image from a container\nimage registry, or applying {{< glossary_tooltip text=\"Secret\" term_id=\"secret\" >}}\ndata.\nWhen you use `kubectl` to query a Pod with a container that is `Waiting`, you also see\na Reason field to summarize why the container is in that state.\n", "relevant_passages": ["What does it mean if a container is in the Waiting state?"]}
{"query": "A user asked the following question:\nQuestion: How does resource scheduling work for containers in a Pod?\nThis is about the following runbook:\nRunbook Title: Resource sharing within containers\nRunbook Content: Detailed behaviorResource sharing within containersGiven the order of execution for init, sidecar and app containers, the following rules\nfor resource usage apply:  \n* The highest of any particular resource request or limit defined on all init\ncontainers is the *effective init request/limit*. If any resource has no\nresource limit specified this is considered as the highest limit.\n* The Pod's *effective request/limit* for a resource is the higher of:\n* the sum of all app containers request/limit for a resource\n* the effective init request/limit for a resource\n* Scheduling is done based on effective requests/limits, which means\ninit containers can reserve resources for initialization that are not used\nduring the life of the Pod.\n* The QoS (quality of service) tier of the Pod's *effective QoS tier* is the\nQoS tier for init containers and app containers alike.  \nQuota and limits are applied based on the effective Pod request and\nlimit.\n", "relevant_passages": ["How does resource scheduling work for containers in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: How does Kubernetes classify Pods into QoS classes?\nThis is about the following runbook:\nRunbook Title: Quality of Service classes\nRunbook Content: Quality of Service classesKubernetes classifies the Pods that you run and allocates each Pod into a specific\n_quality of service (QoS) class_. Kubernetes uses that classification to influence how different\npods are handled. Kubernetes does this classification based on the\n[resource requests](/docs/concepts/configuration/manage-resources-containers/)\nof the {{< glossary_tooltip text=\"Containers\" term_id=\"container\" >}} in that Pod, along with\nhow those requests relate to resource limits.\nThis is known as {{< glossary_tooltip text=\"Quality of Service\" term_id=\"qos-class\" >}}\n(QoS) class. Kubernetes assigns every Pod a QoS class based on the resource requests\nand limits of its component Containers. QoS classes are used by Kubernetes to decide\nwhich Pods to evict from a Node experiencing\n[Node Pressure](/docs/concepts/scheduling-eviction/node-pressure-eviction/). The possible\nQoS classes are `Guaranteed`, `Burstable`, and `BestEffort`. When a Node runs out of resources,\nKubernetes will first evict `BestEffort` Pods running on that Node, followed by `Burstable` and\nfinally `Guaranteed` Pods. When this eviction is due to resource pressure, only Pods exceeding\nresource requests are candidates for eviction.\n", "relevant_passages": ["How does Kubernetes classify Pods into QoS classes?"]}
{"query": "A user asked the following question:\nQuestion: What do I need to define in a Pod's spec to use the downward API?\nThis is about the following runbook:\nRunbook Title: Available fields\nRunbook Content: Available fieldsOnly some Kubernetes API fields are available through the downward API. This\nsection lists which fields you can make available.  \nYou can pass information from available Pod-level fields using `fieldRef`.\nAt the API level, the `spec` for a Pod always defines at least one\n[Container](/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container).\nYou can pass information from available Container-level fields using\n`resourceFieldRef`.\n", "relevant_passages": ["What do I need to define in a Pod's spec to use the downward API?"]}
{"query": "A user asked the following question:\nQuestion: Is it possible to use hostPID when hostUsers is false?\nThis is about the following runbook:\nRunbook Title: Limitations\nRunbook Content: LimitationsWhen using a user namespace for the pod, it is disallowed to use other host\nnamespaces. In particular, if you set `hostUsers: false` then you are not\nallowed to set any of:  \n* `hostNetwork: true`\n* `hostIPC: true`\n* `hostPID: true`\n", "relevant_passages": ["Is it possible to use hostPID when hostUsers is false?"]}
{"query": "A user asked the following question:\nQuestion: How does the kubelet determine if a Pod is ready to start containers?\nThis is about the following runbook:\nRunbook Title: Pod network readiness {#pod-has-network}\nRunbook Content: Pod conditionsPod network readiness {#pod-has-network}{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \n{{< note >}}\nDuring its early development, this condition was named `PodHasNetwork`.\n{{< /note >}}  \nAfter a Pod gets scheduled on a node, it needs to be admitted by the kubelet and\nto have any required storage volumes mounted. Once these phases are complete,\nthe kubelet works with\na container runtime (using {{< glossary_tooltip term_id=\"cri\" >}}) to set up a\nruntime sandbox and configure networking for the Pod. If the\n`PodReadyToStartContainersCondition`\n[feature gate](/docs/reference/command-line-tools-reference/feature-gates/) is enabled\n(it is enabled by default for Kubernetes {{< skew currentVersion >}}), the\n`PodReadyToStartContainers` condition will be added to the `status.conditions` field of a Pod.  \nThe `PodReadyToStartContainers` condition is set to `False` by the Kubelet when it detects a\nPod does not have a runtime sandbox with networking configured. This occurs in\nthe following scenarios:  \n- Early in the lifecycle of the Pod, when the kubelet has not yet begun to set up a sandbox for\nthe Pod using the container runtime.\n- Later in the lifecycle of the Pod, when the Pod sandbox has been destroyed due to either:\n- the node rebooting, without the Pod getting evicted\n- for container runtimes that use virtual machines for isolation, the Pod\nsandbox virtual machine rebooting, which then requires creating a new sandbox and\nfresh container network configuration.  \nThe `PodReadyToStartContainers` condition is set to `True` by the kubelet after the\nsuccessful completion of sandbox creation and network configuration for the Pod\nby the runtime plugin. The kubelet can start pulling container images and create\ncontainers after `PodReadyToStartContainers` condition has been set to `True`.  \nFor a Pod with init containers, the kubelet sets the `Initialized` condition to\n`True` after the init containers have successfully completed (which happens\nafter successful sandbox creation and network configuration by the runtime\nplugin). For a Pod without init containers, the kubelet sets the `Initialized`\ncondition to `True` before sandbox creation and network configuration starts.\n", "relevant_passages": ["How does the kubelet determine if a Pod is ready to start containers?"]}
{"query": "A user asked the following question:\nQuestion: How does Memory QoS determine which settings to apply for memory management?\nThis is about the following runbook:\nRunbook Title: Memory QoS with cgroup v2\nRunbook Content: Memory QoS with cgroup v2{{< feature-state feature_gate_name=\"MemoryQoS\" >}}  \nMemory QoS uses the memory controller of cgroup v2 to guarantee memory resources in Kubernetes.\nMemory requests and limits of containers in pod are used to set specific interfaces `memory.min`\nand `memory.high` provided by the memory controller. When `memory.min` is set to memory requests,\nmemory resources are reserved and never reclaimed by the kernel; this is how Memory QoS ensures\nmemory availability for Kubernetes pods. And if memory limits are set in the container,\nthis means that the system needs to limit container memory usage; Memory QoS uses `memory.high`\nto throttle workload approaching its memory limit, ensuring that the system is not overwhelmed\nby instantaneous memory allocation.  \nMemory QoS relies on QoS class to determine which settings to apply; however, these are different\nmechanisms that both provide controls over quality of service.\n", "relevant_passages": ["How does Memory QoS determine which settings to apply for memory management?"]}
{"query": "A user asked the following question:\nQuestion: How does the kubelet handle init containers during Pod startup?\nThis is about the following runbook:\nRunbook Title: Detailed behavior\nRunbook Content: Detailed behaviorDuring Pod startup, the kubelet delays running init containers until the networking\nand storage are ready. Then the kubelet runs the Pod's init containers in the order\nthey appear in the Pod's spec.  \nEach init container must exit successfully before\nthe next container starts. If a container fails to start due to the runtime or\nexits with failure, it is retried according to the Pod `restartPolicy`. However,\nif the Pod `restartPolicy` is set to Always, the init containers use\n`restartPolicy` OnFailure.  \nA Pod cannot be `Ready` until all init containers have succeeded. The ports on an\ninit container are not aggregated under a Service. A Pod that is initializing\nis in the `Pending` state but should have a condition `Initialized` set to false.  \nIf the Pod [restarts](#pod-restart-reasons), or is restarted, all init containers\nmust execute again.  \nChanges to the init container spec are limited to the container image field.\nDirectly altering the `image` field of  an init container does _not_ restart the\nPod or trigger its recreation. If the Pod has yet to start, that change may\nhave an effect on how the Pod boots up.  \nFor a [pod template](/docs/concepts/workloads/pods/#pod-templates)\nyou can typically change any field for an init container; the impact of making\nthat change depends on where the pod template is used.  \nBecause init containers can be restarted, retried, or re-executed, init container\ncode should be idempotent. In particular, code that writes into any `emptyDir` volume\nshould be prepared for the possibility that an output file already exists.  \nInit containers have all of the fields of an app container. However, Kubernetes\nprohibits `readinessProbe` from being used because init containers cannot\ndefine readiness distinct from completion. This is enforced during validation.  \nUse `activeDeadlineSeconds` on the Pod to prevent init containers from failing forever.\nThe active deadline includes init containers.\nHowever it is recommended to use `activeDeadlineSeconds` only if teams deploy their application\nas a Job, because `activeDeadlineSeconds` has an effect even after initContainer finished.\nThe Pod which is already running correctly would be killed by `activeDeadlineSeconds` if you set.  \nThe name of each app and init container in a Pod must be unique; a\nvalidation error is thrown for any container sharing a name with another.\n", "relevant_passages": ["How does the kubelet handle init containers during Pod startup?"]}
{"query": "A user asked the following question:\nQuestion: How can I find out why my container is in the Waiting state?\nThis is about the following runbook:\nRunbook Title: `Waiting` {#container-state-waiting}\nRunbook Content: Container states`Waiting` {#container-state-waiting}If a container is not in either the `Running` or `Terminated` state, it is `Waiting`.\nA container in the `Waiting` state is still running the operations it requires in\norder to complete start up: for example, pulling the container image from a container\nimage registry, or applying {{< glossary_tooltip text=\"Secret\" term_id=\"secret\" >}}\ndata.\nWhen you use `kubectl` to query a Pod with a container that is `Waiting`, you also see\na Reason field to summarize why the container is in that state.\n", "relevant_passages": ["How can I find out why my container is in the Waiting state?"]}
{"query": "A user asked the following question:\nQuestion: What are the requirements for a Pod to be classified as Guaranteed?\nThis is about the following runbook:\nRunbook Title: Guaranteed\nRunbook Content: Quality of Service classesGuaranteedPods that are `Guaranteed` have the strictest resource limits and are least likely\nto face eviction. They are guaranteed not to be killed until they exceed their limits\nor there are no lower-priority Pods that can be preempted from the Node. They may\nnot acquire resources beyond their specified limits. These Pods can also make\nuse of exclusive CPUs using the\n[`static`](/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) CPU management policy.  \n#### Criteria  \nFor a Pod to be given a QoS class of `Guaranteed`:  \n* Every Container in the Pod must have a memory limit and a memory request.\n* For every Container in the Pod, the memory limit must equal the memory request.\n* Every Container in the Pod must have a CPU limit and a CPU request.\n* For every Container in the Pod, the CPU limit must equal the CPU request.\n", "relevant_passages": ["What are the requirements for a Pod to be classified as Guaranteed?"]}
{"query": "A user asked the following question:\nQuestion: What are Liveness, Readiness, and Startup Probes, and how do I configure them?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Get hands-on experience\n[attaching handlers to container lifecycle events](/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/).  \n* Get hands-on experience\n[configuring Liveness, Readiness and Startup Probes](/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).  \n* Learn more about [container lifecycle hooks](/docs/concepts/containers/container-lifecycle-hooks/).  \n* Learn more about [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/).  \n* For detailed information about Pod and container status in the API, see\nthe API reference documentation covering\n[`status`](/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus) for Pod.\n", "relevant_passages": ["What are Liveness, Readiness, and Startup Probes, and how do I configure them?"]}
{"query": "A user asked the following question:\nQuestion: How do I update a Pod in Kubernetes without replacing it?\nThis is about the following runbook:\nRunbook Title: Pod update and replacement\nRunbook Content: Pod update and replacementAs mentioned in the previous section, when the Pod template for a workload\nresource is changed, the controller creates new Pods based on the updated\ntemplate instead of updating or patching the existing Pods.  \nKubernetes doesn't prevent you from managing Pods directly. It is possible to\nupdate some fields of a running Pod, in place. However, Pod update operations\nlike\n[`patch`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#patch-pod-v1-core), and\n[`replace`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#replace-pod-v1-core)\nhave some limitations:  \n- Most of the metadata about a Pod is immutable. For example, you cannot\nchange the `namespace`, `name`, `uid`, or `creationTimestamp` fields;\nthe `generation` field is unique. It only accepts updates that increment the\nfield's current value.\n- If the `metadata.deletionTimestamp` is set, no new entry can be added to the\n`metadata.finalizers` list.\n- Pod updates may not change fields other than `spec.containers[*].image`,\n`spec.initContainers[*].image`, `spec.activeDeadlineSeconds` or\n`spec.tolerations`. For `spec.tolerations`, you can only add new entries.\n- When updating the `spec.activeDeadlineSeconds` field, two types of updates\nare allowed:  \n1. setting the unassigned field to a positive number;\n1. updating the field from a positive number to a smaller, non-negative\nnumber.\n", "relevant_passages": ["How do I update a Pod in Kubernetes without replacing it?"]}
{"query": "A user asked the following question:\nQuestion: How can I check the state of containers in a Pod?\nThis is about the following runbook:\nRunbook Title: Container states\nRunbook Content: Container statesAs well as the [phase](#pod-phase) of the Pod overall, Kubernetes tracks the state of\neach container inside a Pod. You can use\n[container lifecycle hooks](/docs/concepts/containers/container-lifecycle-hooks/) to\ntrigger events to run at certain points in a container's lifecycle.  \nOnce the {{< glossary_tooltip text=\"scheduler\" term_id=\"kube-scheduler\" >}}\nassigns a Pod to a Node, the kubelet starts creating containers for that Pod\nusing a {{< glossary_tooltip text=\"container runtime\" term_id=\"container-runtime\" >}}.\nThere are three possible container states: `Waiting`, `Running`, and `Terminated`.  \nTo check the state of a Pod's containers, you can use\n`kubectl describe pod <name-of-pod>`. The output shows the state for each container\nwithin that Pod.  \nEach state has a specific meaning:\n", "relevant_passages": ["How can I check the state of containers in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: What happens to the hostname seen by containers within a Pod?\nThis is about the following runbook:\nRunbook Title: Pod networking\nRunbook Content: Resource sharing and communicationPod networkingEach Pod is assigned a unique IP address for each address family. Every\ncontainer in a Pod shares the network namespace, including the IP address and\nnetwork ports. Inside a Pod (and **only** then), the containers that belong to the Pod\ncan communicate with one another using `localhost`. When containers in a Pod communicate\nwith entities *outside the Pod*,\nthey must coordinate how they use the shared network resources (such as ports).\nWithin a Pod, containers share an IP address and port space, and\ncan find each other via `localhost`. The containers in a Pod can also communicate\nwith each other using standard inter-process communications like SystemV semaphores\nor POSIX shared memory.  Containers in different Pods have distinct IP addresses\nand can not communicate by OS-level IPC without special configuration.\nContainers that want to interact with a container running in a different Pod can\nuse IP networking to communicate.  \nContainers within the Pod see the system hostname as being the same as the configured\n`name` for the Pod. There's more about this in the [networking](/docs/concepts/cluster-administration/networking/)\nsection.\n", "relevant_passages": ["What happens to the hostname seen by containers within a Pod?"]}
{"query": "A user asked the following question:\nQuestion: Where can I learn more about container lifecycle hooks?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Get hands-on experience\n[attaching handlers to container lifecycle events](/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/).  \n* Get hands-on experience\n[configuring Liveness, Readiness and Startup Probes](/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).  \n* Learn more about [container lifecycle hooks](/docs/concepts/containers/container-lifecycle-hooks/).  \n* Learn more about [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/).  \n* For detailed information about Pod and container status in the API, see\nthe API reference documentation covering\n[`status`](/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus) for Pod.\n", "relevant_passages": ["Where can I learn more about container lifecycle hooks?"]}
{"query": "A user asked the following question:\nQuestion: How do I drain a node in a Kubernetes cluster with a PodDisruptionBudget?\nThis is about the following runbook:\nRunbook Title: PodDisruptionBudget example {#pdb-example}\nRunbook Content: PodDisruptionBudget example {#pdb-example}Consider a cluster with 3 nodes, `node-1` through `node-3`.\nThe cluster is running several applications.  One of them has 3 replicas initially called\n`pod-a`, `pod-b`, and `pod-c`.  Another, unrelated pod without a PDB, called `pod-x`, is also shown.\nInitially, the pods are laid out as follows:  \n|       node-1         |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *available*   | pod-b *available*   | pod-c *available*  |\n| pod-x  *available*   |                     |                    |  \nAll 3 pods are part of a deployment, and they collectively have a PDB which requires\nthere be at least 2 of the 3 pods to be available at all times.  \nFor example, assume the cluster administrator wants to reboot into a new kernel version to fix a bug in the kernel.\nThe cluster administrator first tries to drain `node-1` using the `kubectl drain` command.\nThat tool tries to evict `pod-a` and `pod-x`.  This succeeds immediately.\nBoth pods go into the `terminating` state at the same time.\nThis puts the cluster in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* |                     |                    |  \nThe deployment notices that one of the pods is terminating, so it creates a replacement\ncalled `pod-d`.  Since `node-1` is cordoned, it lands on another node.  Something has\nalso created `pod-y` as a replacement for `pod-x`.  \n(Note: for a StatefulSet, `pod-a`, which would be called something like `pod-0`, would need\nto terminate completely before its replacement, which is also called `pod-0` but has a\ndifferent UID, could be created.  Otherwise, the example applies to a StatefulSet as well.)  \nNow the cluster is in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* | pod-d *starting*    | pod-y              |  \nAt some point, the pods terminate, and the cluster looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *starting*    | pod-y              |  \nAt this point, if an impatient cluster administrator tries to drain `node-2` or\n`node-3`, the drain command will block, because there are only 2 available\npods for the deployment, and its PDB requires at least 2.  After some time passes, `pod-d` becomes available.  \nThe cluster state now looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *available*   | pod-y              |  \nNow, the cluster administrator tries to drain `node-2`.\nThe drain command will try to evict the two pods in some order, say\n`pod-b` first and then `pod-d`.  It will succeed at evicting `pod-b`.\nBut, when it tries to evict `pod-d`, it will be refused because that would leave only\none pod available for the deployment.  \nThe deployment creates a replacement for `pod-b` called `pod-e`.\nBecause there are not enough resources in the cluster to schedule\n`pod-e` the drain will again block.  The cluster may end up in this\nstate:  \n|    node-1 *drained*  |       node-2        |       node-3       | *no node*          |\n|:--------------------:|:-------------------:|:------------------:|:------------------:|\n|                      | pod-b *terminating* | pod-c *available*  | pod-e *pending*    |\n|                      | pod-d *available*   | pod-y              |                    |  \nAt this point, the cluster administrator needs to\nadd a node back to the cluster to proceed with the upgrade.  \nYou can see how Kubernetes varies the rate at which disruptions\ncan happen, according to:  \n- how many replicas an application needs\n- how long it takes to gracefully shutdown an instance\n- how long it takes a new instance to start up\n- the type of controller\n- the cluster's resource capacity\n", "relevant_passages": ["How do I drain a node in a Kubernetes cluster with a PodDisruptionBudget?"]}
{"query": "A user asked the following question:\nQuestion: What are ephemeral containers used for in Kubernetes?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- verb\n- yujuhong\ntitle: Ephemeral Containers\ncontent_type: concept\nweight: 60\n---  \n<!-- overview -->  \n{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nThis page provides an overview of ephemeral containers: a special type of container\nthat runs temporarily in an existing {{< glossary_tooltip term_id=\"pod\" >}} to\naccomplish user-initiated actions such as troubleshooting. You use ephemeral\ncontainers to inspect services rather than to build applications.  \n<!-- body -->\n", "relevant_passages": ["What are ephemeral containers used for in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: How do I specify init containers in a Pod?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- erictune\ntitle: Init Containers\ncontent_type: concept\nweight: 40\n---  \n<!-- overview -->\nThis page provides an overview of init containers: specialized containers that run\nbefore app containers in a {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}}.\nInit containers can contain utilities or setup scripts not present in an app image.  \nYou can specify init containers in the Pod specification alongside the `containers`\narray (which describes app containers).  \nIn Kubernetes, a [sidecar container](/docs/concepts/workloads/pods/sidecar-containers/) is a container that\nstarts before the main application container and _continues to run_. This document is about init containers:\ncontainers that run to completion during Pod initialization.  \n<!-- body -->\n", "relevant_passages": ["How do I specify init containers in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: Does the .spec.os.name field affect how the kube-scheduler selects nodes?\nThis is about the following runbook:\nRunbook Title: Pod OS\nRunbook Content: Working with PodsPod OS{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nYou should set the `.spec.os.name` field to either `windows` or `linux` to indicate the OS on\nwhich you want the pod to run. These two are the only operating systems supported for now by\nKubernetes. In the future, this list may be expanded.  \nIn Kubernetes v{{< skew currentVersion >}}, the value of `.spec.os.name` does not affect\nhow the {{< glossary_tooltip text=\"kube-scheduler\" term_id=\"kube-scheduler\" >}}\npicks a node for the Pod to run on. In any cluster where there is more than one operating system for\nrunning nodes, you should set the\n[kubernetes.io/os](/docs/reference/labels-annotations-taints/#kubernetes-io-os)\nlabel correctly on each node, and define pods with a `nodeSelector` based on the operating system\nlabel. The kube-scheduler assigns your pod to a node based on other criteria and may or may not\nsucceed in picking a suitable node placement where the node OS is right for the containers in that Pod.\nThe [Pod security standards](/docs/concepts/security/pod-security-standards/) also use this\nfield to avoid enforcing policies that aren't relevant to the operating system.\n", "relevant_passages": ["Does the .spec.os.name field affect how the kube-scheduler selects nodes?"]}
{"query": "A user asked the following question:\nQuestion: How can I ensure my Pod only receives traffic when it's ready?\nThis is about the following runbook:\nRunbook Title: Types of probe\nRunbook Content: Container probesTypes of probeThe kubelet can optionally perform and react to three kinds of probes on running\ncontainers:  \n`livenessProbe`\n: Indicates whether the container is running. If\nthe liveness probe fails, the kubelet kills the container, and the container\nis subjected to its [restart policy](#restart-policy). If a container does not\nprovide a liveness probe, the default state is `Success`.  \n`readinessProbe`\n: Indicates whether the container is ready to respond to requests.\nIf the readiness probe fails, the endpoints controller removes the Pod's IP\naddress from the endpoints of all Services that match the Pod. The default\nstate of readiness before the initial delay is `Failure`. If a container does\nnot provide a readiness probe, the default state is `Success`.  \n`startupProbe`\n: Indicates whether the application within the container is started.\nAll other probes are disabled if a startup probe is provided, until it succeeds.\nIf the startup probe fails, the kubelet kills the container, and the container\nis subjected to its [restart policy](#restart-policy). If a container does not\nprovide a startup probe, the default state is `Success`.  \nFor more information about how to set up a liveness, readiness, or startup probe,\nsee [Configure Liveness, Readiness and Startup Probes](/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).  \n#### When should you use a liveness probe?  \nIf the process in your container is able to crash on its own whenever it\nencounters an issue or becomes unhealthy, you do not necessarily need a liveness\nprobe; the kubelet will automatically perform the correct action in accordance\nwith the Pod's `restartPolicy`.  \nIf you'd like your container to be killed and restarted if a probe fails, then\nspecify a liveness probe, and specify a `restartPolicy` of Always or OnFailure.  \n#### When should you use a readiness probe?  \nIf you'd like to start sending traffic to a Pod only when a probe succeeds,\nspecify a readiness probe. In this case, the readiness probe might be the same\nas the liveness probe, but the existence of the readiness probe in the spec means\nthat the Pod will start without receiving any traffic and only start receiving\ntraffic after the probe starts succeeding.  \nIf you want your container to be able to take itself down for maintenance, you\ncan specify a readiness probe that checks an endpoint specific to readiness that\nis different from the liveness probe.  \nIf your app has a strict dependency on back-end services, you can implement both\na liveness and a readiness probe. The liveness probe passes when the app itself\nis healthy, but the readiness probe additionally checks that each required\nback-end service is available. This helps you avoid directing traffic to Pods\nthat can only respond with error messages.  \nIf your container needs to work on loading large data, configuration files, or\nmigrations during startup, you can use a\n[startup probe](#when-should-you-use-a-startup-probe). However, if you want to\ndetect the difference between an app that has failed and an app that is still\nprocessing its startup data, you might prefer a readiness probe.  \n{{< note >}}\nIf you want to be able to drain requests when the Pod is deleted, you do not\nnecessarily need a readiness probe; on deletion, the Pod automatically puts itself\ninto an unready state regardless of whether the readiness probe exists.\nThe Pod remains in the unready state while it waits for the containers in the Pod\nto stop.\n{{< /note >}}  \n#### When should you use a startup probe?  \nStartup probes are useful for Pods that have containers that take a long time to\ncome into service. Rather than set a long liveness interval, you can configure\na separate configuration for probing the container as it starts up, allowing\na time longer than the liveness interval would allow.  \nIf your container usually starts in more than\n`initialDelaySeconds + failureThreshold \u00d7 periodSeconds`, you should specify a\nstartup probe that checks the same endpoint as the liveness probe. The default for\n`periodSeconds` is 10s. You should then set its `failureThreshold` high enough to\nallow the container to start, without changing the default values of the liveness\nprobe. This helps to protect against deadlocks.\n", "relevant_passages": ["How can I ensure my Pod only receives traffic when it's ready?"]}
{"query": "A user asked the following question:\nQuestion: How do I create an ephemeral container in Kubernetes?\nThis is about the following runbook:\nRunbook Title: What is an ephemeral container?\nRunbook Content: Understanding ephemeral containersWhat is an ephemeral container?Ephemeral containers differ from other containers in that they lack guarantees\nfor resources or execution, and they will never be automatically restarted, so\nthey are not appropriate for building applications.  Ephemeral containers are\ndescribed using the same `ContainerSpec` as regular containers, but many fields\nare incompatible and disallowed for ephemeral containers.  \n- Ephemeral containers may not have ports, so fields such as `ports`,\n`livenessProbe`, `readinessProbe` are disallowed.\n- Pod resource allocations are immutable, so setting `resources` is disallowed.\n- For a complete list of allowed fields, see the [EphemeralContainer reference\ndocumentation](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#ephemeralcontainer-v1-core).  \nEphemeral containers are created using a special `ephemeralcontainers` handler\nin the API rather than by adding them directly to `pod.spec`, so it's not\npossible to add an ephemeral container using `kubectl edit`.  \nLike regular containers, you may not change or remove an ephemeral container\nafter you have added it to a Pod.  \n{{< note >}}\nEphemeral containers are not supported by [static pods](/docs/tasks/configure-pod-container/static-pod/).\n{{< /note >}}\n", "relevant_passages": ["How do I create an ephemeral container in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: Can I run multiple containers in a single Pod?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- erictune\ntitle: Pods\napi_metadata:\n- apiVersion: \"v1\"\nkind: \"Pod\"\ncontent_type: concept\nweight: 10\nno_list: true\n---  \n<!-- overview -->  \n_Pods_ are the smallest deployable units of computing that you can create and manage in Kubernetes.  \nA _Pod_ (as in a pod of whales or pea pod) is a group of one or more\n{{< glossary_tooltip text=\"containers\" term_id=\"container\" >}}, with shared storage and network resources, and a specification for how to run the containers. A Pod's contents are always co-located and\nco-scheduled, and run in a shared context. A Pod models an\napplication-specific \"logical host\": it contains one or more application\ncontainers which are relatively tightly coupled.\nIn non-cloud contexts, applications executed on the same physical or virtual machine are analogous to cloud applications executed on the same logical host.  \nAs well as application containers, a Pod can contain\n{{< glossary_tooltip text=\"init containers\" term_id=\"init-container\" >}} that run\nduring Pod startup. You can also inject\n{{< glossary_tooltip text=\"ephemeral containers\" term_id=\"ephemeral-container\" >}}\nfor debugging a running Pod.  \n<!-- body -->\n", "relevant_passages": ["Can I run multiple containers in a single Pod?"]}
{"query": "A user asked the following question:\nQuestion: Do init containers interact directly with the main application containers?\nThis is about the following runbook:\nRunbook Title: Differences from sidecar containers\nRunbook Content: Understanding init containersDifferences from sidecar containersInit containers run and complete their tasks before the main application container starts.\nUnlike [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers),\ninit containers are not continuously running alongside the main containers.  \nInit containers run to completion sequentially, and the main container does not start\nuntil all the init containers have successfully completed.  \ninit containers do not support `lifecycle`, `livenessProbe`, `readinessProbe`, or\n`startupProbe` whereas sidecar containers support all these [probes](/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe) to control their lifecycle.  \nInit containers share the same resources (CPU, memory, network) with the main application\ncontainers but do not interact directly with them. They can, however, use shared volumes\nfor data exchange.\n", "relevant_passages": ["Do init containers interact directly with the main application containers?"]}
{"query": "A user asked the following question:\nQuestion: What happens when a container in a Pod exits?\nThis is about the following runbook:\nRunbook Title: Container restart policy {#restart-policy}\nRunbook Content: How Pods handle problems with containers {#container-restarts}Container restart policy {#restart-policy}The `spec` of a Pod has a `restartPolicy` field with possible values Always, OnFailure,\nand Never. The default value is Always.  \nThe `restartPolicy` for a Pod applies to {{< glossary_tooltip text=\"app containers\" term_id=\"app-container\" >}}\nin the Pod and to regular [init containers](/docs/concepts/workloads/pods/init-containers/).\n[Sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/)\nignore the Pod-level `restartPolicy` field: in Kubernetes, a sidecar is defined as an\nentry inside `initContainers` that has its container-level `restartPolicy` set to `Always`.\nFor init containers that exit with an error, the kubelet restarts the init container if\nthe Pod level `restartPolicy` is either `OnFailure` or `Always`:  \n* `Always`: Automatically restarts the container after any termination.\n* `OnFailure`: Only restarts the container if it exits with an error (non-zero exit status).\n* `Never`: Does not automatically restart the terminated container.  \nWhen the kubelet is handling container restarts according to the configured restart\npolicy, that only applies to restarts that make replacement containers inside the\nsame Pod and running on the same node. After containers in a Pod exit, the kubelet\nrestarts them with an exponential backoff delay (10s, 20s, 40s, \u2026), that is capped at\n300 seconds (5 minutes). Once a container has executed for 10 minutes without any\nproblems, the kubelet resets the restart backoff timer for that container.\n[Sidecar containers and Pod lifecycle](/docs/concepts/workloads/pods/sidecar-containers/#sidecar-containers-and-pod-lifecycle)\nexplains the behaviour of `init containers` when specify `restartpolicy` field on it.\n", "relevant_passages": ["What happens when a container in a Pod exits?"]}
{"query": "A user asked the following question:\nQuestion: What does a 'Success' outcome mean for a container probe?\nThis is about the following runbook:\nRunbook Title: Probe outcome\nRunbook Content: Container probesProbe outcomeEach probe has one of three results:  \n`Success`\n: The container passed the diagnostic.  \n`Failure`\n: The container failed the diagnostic.  \n`Unknown`\n: The diagnostic failed (no action should be taken, and the kubelet\nwill make further checks).\n", "relevant_passages": ["What does a 'Success' outcome mean for a container probe?"]}
{"query": "A user asked the following question:\nQuestion: Can init containers use lifecycle probes like sidecar containers?\nThis is about the following runbook:\nRunbook Title: Differences from sidecar containers\nRunbook Content: Understanding init containersDifferences from sidecar containersInit containers run and complete their tasks before the main application container starts.\nUnlike [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers),\ninit containers are not continuously running alongside the main containers.  \nInit containers run to completion sequentially, and the main container does not start\nuntil all the init containers have successfully completed.  \ninit containers do not support `lifecycle`, `livenessProbe`, `readinessProbe`, or\n`startupProbe` whereas sidecar containers support all these [probes](/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe) to control their lifecycle.  \nInit containers share the same resources (CPU, memory, network) with the main application\ncontainers but do not interact directly with them. They can, however, use shared volumes\nfor data exchange.\n", "relevant_passages": ["Can init containers use lifecycle probes like sidecar containers?"]}
{"query": "A user asked the following question:\nQuestion: How long does a volume exist in relation to its Pod?\nThis is about the following runbook:\nRunbook Title: Associated lifetimes\nRunbook Content: Pod lifetimeAssociated lifetimesWhen something is said to have the same lifetime as a Pod, such as a\n{{< glossary_tooltip term_id=\"volume\" text=\"volume\" >}},\nthat means that the thing exists as long as that specific Pod (with that exact UID)\nexists. If that Pod is deleted for any reason, and even if an identical replacement\nis created, the related thing (a volume, in this example) is also destroyed and\ncreated anew.  \n{{< figure src=\"/images/docs/pod.svg\" title=\"Figure 1.\" class=\"diagram-medium\" caption=\"A multi-container Pod that contains a file puller [sidecar](/docs/concepts/workloads/pods/sidecar-containers/) and a web server. The Pod uses an [ephemeral `emptyDir` volume](/docs/concepts/storage/volumes/#emptydir) for shared storage between the containers.\" >}}\n", "relevant_passages": ["How long does a volume exist in relation to its Pod?"]}
{"query": "A user asked the following question:\nQuestion: How do Pods manage multiple containers?\nThis is about the following runbook:\nRunbook Title: What is a Pod?\nRunbook Content: What is a Pod?{{< note >}}\nYou need to install a [container runtime](/docs/setup/production-environment/container-runtimes/)\ninto each node in the cluster so that Pods can run there.\n{{< /note >}}  \nThe shared context of a Pod is a set of Linux namespaces, cgroups, and\npotentially other facets of isolation - the same things that isolate a {{< glossary_tooltip text=\"container\" term_id=\"container\" >}}. Within a Pod's context, the individual applications may have\nfurther sub-isolations applied.  \nA Pod is similar to a set of containers with shared namespaces and shared filesystem volumes.  \nPods in a Kubernetes cluster are used in two main ways:  \n* **Pods that run a single container**. The \"one-container-per-Pod\" model is the\nmost common Kubernetes use case; in this case, you can think of a Pod as a\nwrapper around a single container; Kubernetes manages Pods rather than managing\nthe containers directly.\n* **Pods that run multiple containers that need to work together**. A Pod can\nencapsulate an application composed of\n[multiple co-located containers](#how-pods-manage-multiple-containers) that are\ntightly coupled and need to share resources. These co-located containers\nform a single cohesive unit.  \nGrouping multiple co-located and co-managed containers in a single Pod is a\nrelatively advanced use case. You should use this pattern only in specific\ninstances in which your containers are tightly coupled.  \nYou don't need to run multiple containers to provide replication (for resilience\nor capacity); if you need multiple replicas, see\n[Workload management](/docs/concepts/workloads/controllers/).\n", "relevant_passages": ["How do Pods manage multiple containers?"]}
{"query": "A user asked the following question:\nQuestion: How do I create Pods without doing it directly?\nThis is about the following runbook:\nRunbook Title: Workload resources for managing pods\nRunbook Content: Using PodsWorkload resources for managing podsUsually you don't need to create Pods directly, even singleton Pods. Instead, create them using workload resources such as {{< glossary_tooltip text=\"Deployment\"\nterm_id=\"deployment\" >}} or {{< glossary_tooltip text=\"Job\" term_id=\"job\" >}}.\nIf your Pods need to track state, consider the\n{{< glossary_tooltip text=\"StatefulSet\" term_id=\"statefulset\" >}} resource.  \nEach Pod is meant to run a single instance of a given application. If you want to\nscale your application horizontally (to provide more overall resources by running\nmore instances), you should use multiple Pods, one for each instance. In\nKubernetes, this is typically referred to as _replication_.\nReplicated Pods are usually created and managed as a group by a workload resource\nand its {{< glossary_tooltip text=\"controller\" term_id=\"controller\" >}}.  \nSee [Pods and controllers](#pods-and-controllers) for more information on how\nKubernetes uses workload resources, and their controllers, to implement application\nscaling and auto-healing.  \nPods natively provide two kinds of shared resources for their constituent containers:\n[networking](#pod-networking) and [storage](#pod-storage).\n", "relevant_passages": ["How do I create Pods without doing it directly?"]}
{"query": "A user asked the following question:\nQuestion: How does the Pod garbage collector handle Pods during disruption?\nThis is about the following runbook:\nRunbook Title: Pod disruption conditions {#pod-disruption-conditions}\nRunbook Content: Pod disruption conditions {#pod-disruption-conditions}{{< feature-state feature_gate_name=\"PodDisruptionConditions\" >}}  \nA dedicated Pod `DisruptionTarget` [condition](/docs/concepts/workloads/pods/pod-lifecycle/#pod-conditions)\nis added to indicate\nthat the Pod is about to be deleted due to a {{<glossary_tooltip term_id=\"disruption\" text=\"disruption\">}}.\nThe `reason` field of the condition additionally\nindicates one of the following reasons for the Pod termination:  \n`PreemptionByScheduler`\n: Pod is due to be {{<glossary_tooltip term_id=\"preemption\" text=\"preempted\">}} by a scheduler in order to accommodate a new Pod with a higher priority. For more information, see [Pod priority preemption](/docs/concepts/scheduling-eviction/pod-priority-preemption/).  \n`DeletionByTaintManager`\n: Pod is due to be deleted by Taint Manager (which is part of the node lifecycle controller within `kube-controller-manager`) due to a `NoExecute` taint that the Pod does not tolerate; see {{<glossary_tooltip term_id=\"taint\" text=\"taint\">}}-based evictions.  \n`EvictionByEvictionAPI`\n: Pod has been marked for {{<glossary_tooltip term_id=\"api-eviction\" text=\"eviction using the Kubernetes API\">}} .  \n`DeletionByPodGC`\n: Pod, that is bound to a no longer existing Node, is due to be deleted by [Pod garbage collection](/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection).  \n`TerminationByKubelet`\n: Pod has been terminated by the kubelet, because of either {{<glossary_tooltip term_id=\"node-pressure-eviction\" text=\"node pressure eviction\">}},\nthe [graceful node shutdown](/docs/concepts/architecture/nodes/#graceful-node-shutdown),\nor preemption for [system critical pods](/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).  \nIn all other disruption scenarios, like eviction due to exceeding\n[Pod container limits](/docs/concepts/configuration/manage-resources-containers/),\nPods don't receive the `DisruptionTarget` condition because the disruptions were\nprobably caused by the Pod and would reoccur on retry.  \n{{< note >}}\nA Pod disruption might be interrupted. The control plane might re-attempt to\ncontinue the disruption of the same Pod, but it is not guaranteed. As a result,\nthe `DisruptionTarget` condition might be added to a Pod, but that Pod might then not actually be\ndeleted. In such a situation, after some time, the\nPod disruption condition will be cleared.\n{{< /note >}}  \nAlong with cleaning up the pods, the Pod garbage collector (PodGC) will also mark them as failed if they are in a non-terminal\nphase (see also [Pod garbage collection](/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection)).  \nWhen using a Job (or CronJob), you may want to use these Pod disruption conditions as part of your Job's\n[Pod failure policy](/docs/concepts/workloads/controllers/job#pod-failure-policy).\n", "relevant_passages": ["How does the Pod garbage collector handle Pods during disruption?"]}
{"query": "A user asked the following question:\nQuestion: What fields can I use to set CPU limits for a container?\nThis is about the following runbook:\nRunbook Title: Information available via `resourceFieldRef` {#downwardapi-resourceFieldRef}\nRunbook Content: Available fieldsInformation available via `resourceFieldRef` {#downwardapi-resourceFieldRef}These container-level fields allow you to provide information about\n[requests and limits](/docs/concepts/configuration/manage-resources-containers/#requests-and-limits)\nfor resources such as CPU and memory.  \n`resource: limits.cpu`\n: A container's CPU limit  \n`resource: requests.cpu`\n: A container's CPU request  \n`resource: limits.memory`\n: A container's memory limit  \n`resource: requests.memory`\n: A container's memory request  \n`resource: limits.hugepages-*`\n: A container's hugepages limit  \n`resource: requests.hugepages-*`\n: A container's hugepages request  \n`resource: limits.ephemeral-storage`\n: A container's ephemeral-storage limit  \n`resource: requests.ephemeral-storage`\n: A container's ephemeral-storage request  \n#### Fallback information for resource limits  \nIf CPU and memory limits are not specified for a container, and you use the\ndownward API to try to expose that information, then the\nkubelet defaults to exposing the maximum allocatable value for CPU and memory\nbased on the [node allocatable](/docs/tasks/administer-cluster/reserve-compute-resources/#node-allocatable)\ncalculation.\n", "relevant_passages": ["What fields can I use to set CPU limits for a container?"]}
{"query": "A user asked the following question:\nQuestion: What should I do if my cluster has nodes with different operating systems?\nThis is about the following runbook:\nRunbook Title: Pod OS\nRunbook Content: Working with PodsPod OS{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nYou should set the `.spec.os.name` field to either `windows` or `linux` to indicate the OS on\nwhich you want the pod to run. These two are the only operating systems supported for now by\nKubernetes. In the future, this list may be expanded.  \nIn Kubernetes v{{< skew currentVersion >}}, the value of `.spec.os.name` does not affect\nhow the {{< glossary_tooltip text=\"kube-scheduler\" term_id=\"kube-scheduler\" >}}\npicks a node for the Pod to run on. In any cluster where there is more than one operating system for\nrunning nodes, you should set the\n[kubernetes.io/os](/docs/reference/labels-annotations-taints/#kubernetes-io-os)\nlabel correctly on each node, and define pods with a `nodeSelector` based on the operating system\nlabel. The kube-scheduler assigns your pod to a node based on other criteria and may or may not\nsucceed in picking a suitable node placement where the node OS is right for the containers in that Pod.\nThe [Pod security standards](/docs/concepts/security/pod-security-standards/) also use this\nfield to avoid enforcing policies that aren't relevant to the operating system.\n", "relevant_passages": ["What should I do if my cluster has nodes with different operating systems?"]}
{"query": "A user asked the following question:\nQuestion: How can I manage resources for my Pods and Containers?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn about [resource management for Pods and Containers](/docs/concepts/configuration/manage-resources-containers/).\n* Learn about [Node-pressure eviction](/docs/concepts/scheduling-eviction/node-pressure-eviction/).\n* Learn about [Pod priority and preemption](/docs/concepts/scheduling-eviction/pod-priority-preemption/).\n* Learn about [Pod disruptions](/docs/concepts/workloads/pods/disruptions/).\n* Learn how to [assign memory resources to containers and pods](/docs/tasks/configure-pod-container/assign-memory-resource/).\n* Learn how to [assign CPU resources to containers and pods](/docs/tasks/configure-pod-container/assign-cpu-resource/).\n* Learn how to [configure Quality of Service for Pods](/docs/tasks/configure-pod-container/quality-service-pod/).\n", "relevant_passages": ["How can I manage resources for my Pods and Containers?"]}
{"query": "A user asked the following question:\nQuestion: What are the constraints for assigning subordinate ID ranges to the kubelet user?\nThis is about the following runbook:\nRunbook Title: Set up a node to support user namespaces\nRunbook Content: Set up a node to support user namespacesBy default, the kubelet assigns pods UIDs/GIDs above the range 0-65535, based on\nthe assumption that the host's files and processes use UIDs/GIDs within this\nrange, which is standard for most Linux distributions. This approach prevents\nany overlap between the UIDs/GIDs of the host and those of the pods.  \nAvoiding the overlap is important to mitigate the impact of vulnerabilities such\nas [CVE-2021-25741][CVE-2021-25741], where a pod can potentially read arbitrary\nfiles in the host. If the UIDs/GIDs of the pod and the host don't overlap, it is\nlimited what a pod would be able to do: the pod UID/GID won't match the host's\nfile owner/group.  \nThe kubelet can use a custom range for user IDs and group IDs for pods. To\nconfigure a custom range, the node needs to have:  \n* A user `kubelet` in the system (you cannot use any other username here)\n* The binary `getsubids` installed (part of [shadow-utils][shadow-utils]) and\nin the `PATH` for the kubelet binary.\n* A configuration of subordinate UIDs/GIDs for the `kubelet` user (see\n[`man 5 subuid`](https://man7.org/linux/man-pages/man5/subuid.5.html) and\n[`man 5 subgid`](https://man7.org/linux/man-pages/man5/subgid.5.html)).  \nThis setting only gathers the UID/GID range configuration and does not change\nthe user executing the `kubelet`.  \nYou must follow some constraints for the subordinate ID range that you assign\nto the `kubelet` user:  \n* The subordinate user ID, that starts the UID range for Pods, **must** be a\nmultiple of 65536 and must also be greater than or equal to 65536. In other\nwords, you cannot use any ID from the range 0-65535 for Pods; the kubelet\nimposes this restriction to make it difficult to create an accidentally insecure\nconfiguration.  \n* The subordinate ID count must be a multiple of 65536  \n* The subordinate ID count must be at least `65536 x <maxPods>` where `<maxPods>`\nis the maximum number of pods that can run on the node.  \n* You must assign the same range for both user IDs and for group IDs, It doesn't\nmatter if other users have user ID ranges that don't align with the group ID\nranges.  \n* None of the assigned ranges should overlap with any other assignment.  \n* The subordinate configuration must be only one line. In other words, you can't\nhave multiple ranges.  \nFor example, you could define `/etc/subuid` and `/etc/subgid` to both have\nthese entries for the `kubelet` user:  \n```\n# The format is\n#   name:firstID:count of IDs\n# where\n# - firstID is 65536 (the minimum value possible)\n# - count of IDs is 110 (default limit for number of) * 65536\nkubelet:65536:7208960\n```  \n[CVE-2021-25741]: https://github.com/kubernetes/kubernetes/issues/104980\n[shadow-utils]: https://github.com/shadow-maint/shadow\n", "relevant_passages": ["What are the constraints for assigning subordinate ID ranges to the kubelet user?"]}
{"query": "A user asked the following question:\nQuestion: What should I do to drop specific Linux capabilities in my Pod?\nThis is about the following runbook:\nRunbook Title: Pod security settings {#pod-security}\nRunbook Content: Pod security settings {#pod-security}To set security constraints on Pods and containers, you use the\n`securityContext` field in the Pod specification. This field gives you\ngranular control over what a Pod or individual containers can do. For example:  \n* Drop specific Linux capabilities to avoid the impact of a CVE.\n* Force all processes in the Pod to run as a non-root user or as a specific\nuser or group ID.\n* Set a specific seccomp profile.\n* Set Windows security options, such as whether containers run as HostProcess.  \n{{< caution >}}\nYou can also use the Pod securityContext to enable\n[_privileged mode_](/docs/concepts/security/linux-kernel-security-constraints/#privileged-containers)\nin Linux containers. Privileged mode overrides many of the other security\nsettings in the securityContext. Avoid using this setting unless you can't grant\nthe equivalent permissions by using other fields in the securityContext.\nIn Kubernetes 1.26 and later, you can run Windows containers in a similarly\nprivileged mode by setting the `windowsOptions.hostProcess` flag on the\nsecurity context of the Pod spec. For details and instructions, see\n[Create a Windows HostProcess Pod](/docs/tasks/configure-pod-container/create-hostprocess-pod/).\n{{< /caution >}}  \n* To learn about kernel-level security constraints that you can use,\nsee [Linux kernel security constraints for Pods and containers](/docs/concepts/security/linux-kernel-security-constraints).\n* To learn more about the Pod security context, see\n[Configure a Security Context for a Pod or Container](/docs/tasks/configure-pod-container/security-context/).\n", "relevant_passages": ["What should I do to drop specific Linux capabilities in my Pod?"]}
{"query": "A user asked the following question:\nQuestion: Are there any limitations when using the patch or replace operations on Pods?\nThis is about the following runbook:\nRunbook Title: Pod update and replacement\nRunbook Content: Pod update and replacementAs mentioned in the previous section, when the Pod template for a workload\nresource is changed, the controller creates new Pods based on the updated\ntemplate instead of updating or patching the existing Pods.  \nKubernetes doesn't prevent you from managing Pods directly. It is possible to\nupdate some fields of a running Pod, in place. However, Pod update operations\nlike\n[`patch`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#patch-pod-v1-core), and\n[`replace`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#replace-pod-v1-core)\nhave some limitations:  \n- Most of the metadata about a Pod is immutable. For example, you cannot\nchange the `namespace`, `name`, `uid`, or `creationTimestamp` fields;\nthe `generation` field is unique. It only accepts updates that increment the\nfield's current value.\n- If the `metadata.deletionTimestamp` is set, no new entry can be added to the\n`metadata.finalizers` list.\n- Pod updates may not change fields other than `spec.containers[*].image`,\n`spec.initContainers[*].image`, `spec.activeDeadlineSeconds` or\n`spec.tolerations`. For `spec.tolerations`, you can only add new entries.\n- When updating the `spec.activeDeadlineSeconds` field, two types of updates\nare allowed:  \n1. setting the unassigned field to a positive number;\n1. updating the field from a positive number to a smaller, non-negative\nnumber.\n", "relevant_passages": ["Are there any limitations when using the patch or replace operations on Pods?"]}
{"query": "A user asked the following question:\nQuestion: How can I ensure my Pod runs as a non-root user?\nThis is about the following runbook:\nRunbook Title: Pod security settings {#pod-security}\nRunbook Content: Pod security settings {#pod-security}To set security constraints on Pods and containers, you use the\n`securityContext` field in the Pod specification. This field gives you\ngranular control over what a Pod or individual containers can do. For example:  \n* Drop specific Linux capabilities to avoid the impact of a CVE.\n* Force all processes in the Pod to run as a non-root user or as a specific\nuser or group ID.\n* Set a specific seccomp profile.\n* Set Windows security options, such as whether containers run as HostProcess.  \n{{< caution >}}\nYou can also use the Pod securityContext to enable\n[_privileged mode_](/docs/concepts/security/linux-kernel-security-constraints/#privileged-containers)\nin Linux containers. Privileged mode overrides many of the other security\nsettings in the securityContext. Avoid using this setting unless you can't grant\nthe equivalent permissions by using other fields in the securityContext.\nIn Kubernetes 1.26 and later, you can run Windows containers in a similarly\nprivileged mode by setting the `windowsOptions.hostProcess` flag on the\nsecurity context of the Pod spec. For details and instructions, see\n[Create a Windows HostProcess Pod](/docs/tasks/configure-pod-container/create-hostprocess-pod/).\n{{< /caution >}}  \n* To learn about kernel-level security constraints that you can use,\nsee [Linux kernel security constraints for Pods and containers](/docs/concepts/security/linux-kernel-security-constraints).\n* To learn more about the Pod security context, see\n[Configure a Security Context for a Pod or Container](/docs/tasks/configure-pod-container/security-context/).\n", "relevant_passages": ["How can I ensure my Pod runs as a non-root user?"]}
{"query": "A user asked the following question:\nQuestion: What happens to security vulnerabilities when user namespaces are active?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: User Namespaces\nreviewers:\ncontent_type: concept\nweight: 160\nmin-kubernetes-server-version: v1.25\n---  \n<!-- overview -->\n{{< feature-state for_k8s_version=\"v1.30\" state=\"beta\" >}}  \nThis page explains how user namespaces are used in Kubernetes pods. A user\nnamespace isolates the user running inside the container from the one\nin the host.  \nA process running as root in a container can run as a different (non-root) user\nin the host; in other words, the process has full privileges for operations\ninside the user namespace, but is unprivileged for operations outside the\nnamespace.  \nYou can use this feature to reduce the damage a compromised container can do to\nthe host or other pods in the same node. There are [several security\nvulnerabilities][KEP-vulns] rated either **HIGH** or **CRITICAL** that were not\nexploitable when user namespaces is active. It is expected user namespace will\nmitigate some future vulnerabilities too.  \n[KEP-vulns]: https://github.com/kubernetes/enhancements/tree/217d790720c5aef09b8bd4d6ca96284a0affe6c2/keps/sig-node/127-user-namespaces#motivation  \n<!-- body -->\n", "relevant_passages": ["What happens to security vulnerabilities when user namespaces are active?"]}
{"query": "A user asked the following question:\nQuestion: What happens if I stop or restart a sidecar container?\nThis is about the following runbook:\nRunbook Title: Sidecar containers in Kubernetes {#pod-sidecar-containers}\nRunbook Content: Sidecar containers in Kubernetes {#pod-sidecar-containers}Kubernetes implements sidecar containers as a special case of\n[init containers](/docs/concepts/workloads/pods/init-containers/); sidecar containers remain\nrunning after Pod startup. This document uses the term _regular init containers_ to clearly\nrefer to containers that only run during Pod startup.  \nProvided that your cluster has the `SidecarContainers`\n[feature gate](/docs/reference/command-line-tools-reference/feature-gates/) enabled\n(the feature is active by default since Kubernetes v1.29), you can specify a `restartPolicy`\nfor containers listed in a Pod's `initContainers` field.\nThese restartable _sidecar_ containers are independent from other init containers and from\nthe main application container(s) within the same pod.\nThese can be started, stopped, or restarted without effecting the main application container\nand other init containers.  \nYou can also run a Pod with multiple containers that are not marked as init or sidecar\ncontainers. This is appropriate if the containers within the Pod are required for the\nPod to work overall, but you don't need to control which containers start or stop first.\nYou could also do this if you need to support older versions of Kubernetes that don't\nsupport a container-level `restartPolicy` field.\n", "relevant_passages": ["What happens if I stop or restart a sidecar container?"]}
{"query": "A user asked the following question:\nQuestion: Where can I find information on configuring user namespaces in pods?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Take a look at [Use a User Namespace With a Pod](/docs/tasks/configure-pod-container/user-namespaces/)\n", "relevant_passages": ["Where can I find information on configuring user namespaces in pods?"]}
{"query": "A user asked the following question:\nQuestion: How do Guaranteed Pods handle resource limits?\nThis is about the following runbook:\nRunbook Title: Guaranteed\nRunbook Content: Quality of Service classesGuaranteedPods that are `Guaranteed` have the strictest resource limits and are least likely\nto face eviction. They are guaranteed not to be killed until they exceed their limits\nor there are no lower-priority Pods that can be preempted from the Node. They may\nnot acquire resources beyond their specified limits. These Pods can also make\nuse of exclusive CPUs using the\n[`static`](/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) CPU management policy.  \n#### Criteria  \nFor a Pod to be given a QoS class of `Guaranteed`:  \n* Every Container in the Pod must have a memory limit and a memory request.\n* For every Container in the Pod, the memory limit must equal the memory request.\n* Every Container in the Pod must have a CPU limit and a CPU request.\n* For every Container in the Pod, the CPU limit must equal the CPU request.\n", "relevant_passages": ["How do Guaranteed Pods handle resource limits?"]}
{"query": "A user asked the following question:\nQuestion: Is there a way to see processes in other containers while using ephemeral containers?\nThis is about the following runbook:\nRunbook Title: Uses for ephemeral containers\nRunbook Content: Uses for ephemeral containersEphemeral containers are useful for interactive troubleshooting when `kubectl\nexec` is insufficient because a container has crashed or a container image\ndoesn't include debugging utilities.  \nIn particular, [distroless images](https://github.com/GoogleContainerTools/distroless)\nenable you to deploy minimal container images that reduce attack surface\nand exposure to bugs and vulnerabilities. Since distroless images do not include a\nshell or any debugging utilities, it's difficult to troubleshoot distroless\nimages using `kubectl exec` alone.  \nWhen using ephemeral containers, it's helpful to enable [process namespace\nsharing](/docs/tasks/configure-pod-container/share-process-namespace/) so\nyou can view processes in other containers.\n", "relevant_passages": ["Is there a way to see processes in other containers while using ephemeral containers?"]}
{"query": "A user asked the following question:\nQuestion: What happens when I change the Pod template for a workload resource?\nThis is about the following runbook:\nRunbook Title: Pod update and replacement\nRunbook Content: Pod update and replacementAs mentioned in the previous section, when the Pod template for a workload\nresource is changed, the controller creates new Pods based on the updated\ntemplate instead of updating or patching the existing Pods.  \nKubernetes doesn't prevent you from managing Pods directly. It is possible to\nupdate some fields of a running Pod, in place. However, Pod update operations\nlike\n[`patch`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#patch-pod-v1-core), and\n[`replace`](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#replace-pod-v1-core)\nhave some limitations:  \n- Most of the metadata about a Pod is immutable. For example, you cannot\nchange the `namespace`, `name`, `uid`, or `creationTimestamp` fields;\nthe `generation` field is unique. It only accepts updates that increment the\nfield's current value.\n- If the `metadata.deletionTimestamp` is set, no new entry can be added to the\n`metadata.finalizers` list.\n- Pod updates may not change fields other than `spec.containers[*].image`,\n`spec.initContainers[*].image`, `spec.activeDeadlineSeconds` or\n`spec.tolerations`. For `spec.tolerations`, you can only add new entries.\n- When updating the `spec.activeDeadlineSeconds` field, two types of updates\nare allowed:  \n1. setting the unassigned field to a positive number;\n1. updating the field from a positive number to a smaller, non-negative\nnumber.\n", "relevant_passages": ["What happens when I change the Pod template for a workload resource?"]}
{"query": "A user asked the following question:\nQuestion: What is the downward API in Kubernetes?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Downward API\ncontent_type: concept\nweight: 170\ndescription: >\nThere are two ways to expose Pod and container fields to a running container:\nenvironment variables, and as files that are populated by a special volume type.\nTogether, these two ways of exposing Pod and container fields are called the downward API.\n---  \n<!-- overview -->  \nIt is sometimes useful for a container to have information about itself, without\nbeing overly coupled to Kubernetes. The _downward API_ allows containers to consume\ninformation about themselves or the cluster without using the Kubernetes client\nor API server.  \nAn example is an existing application that assumes a particular well-known\nenvironment variable holds a unique identifier. One possibility is to wrap the\napplication, but that is tedious and error-prone, and it violates the goal of low\ncoupling. A better option would be to use the Pod's name as an identifier, and\ninject the Pod's name into the well-known environment variable.  \nIn Kubernetes, there are two ways to expose Pod and container fields to a running container:  \n* as [environment variables](/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\n* as [files in a `downwardAPI` volume](/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/)  \nTogether, these two ways of exposing Pod and container fields are called the\n_downward API_.  \n<!-- body -->\n", "relevant_passages": ["What is the downward API in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: How can I check if my container is healthy using a command?\nThis is about the following runbook:\nRunbook Title: Check mechanisms {#probe-check-methods}\nRunbook Content: Container probesCheck mechanisms {#probe-check-methods}There are four different ways to check a container using a probe.\nEach probe must define exactly one of these four mechanisms:  \n`exec`\n: Executes a specified command inside the container. The diagnostic\nis considered successful if the command exits with a status code of 0.  \n`grpc`\n: Performs a remote procedure call using [gRPC](https://grpc.io/).\nThe target should implement\n[gRPC health checks](https://grpc.io/grpc/core/md_doc_health-checking.html).\nThe diagnostic is considered successful if the `status`\nof the response is `SERVING`.  \n`httpGet`\n: Performs an HTTP `GET` request against the Pod's IP\naddress on a specified port and path. The diagnostic is\nconsidered successful if the response has a status code\ngreater than or equal to 200 and less than 400.  \n`tcpSocket`\n: Performs a TCP check against the Pod's IP address on\na specified port. The diagnostic is considered successful if\nthe port is open. If the remote system (the container) closes\nthe connection immediately after it opens, this counts as healthy.  \n{{< caution >}} Unlike the other mechanisms, `exec` probe's implementation involves the creation/forking of multiple processes each time when executed.\nAs a result, in case of the clusters having higher pod densities, lower intervals of `initialDelaySeconds`, `periodSeconds`, configuring any probe with exec mechanism might introduce an overhead on the cpu usage of the node.\nIn such scenarios, consider using the alternative probe mechanisms to avoid the overhead.{{< /caution >}}\n", "relevant_passages": ["How can I check if my container is healthy using a command?"]}
{"query": "A user asked the following question:\nQuestion: How can I use the downward API to get Pod-level info in my application?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}You can read about [`downwardAPI` volumes](/docs/concepts/storage/volumes/#downwardapi).  \nYou can try using the downward API to expose container- or Pod-level information:\n* as [environment variables](/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\n* as [files in `downwardAPI` volume](/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/)\n", "relevant_passages": ["How can I use the downward API to get Pod-level info in my application?"]}
{"query": "A user asked the following question:\nQuestion: How does the termination of sidecar containers work when a Pod is shutting down?\nThis is about the following runbook:\nRunbook Title: Pod shutdown and sidecar containers {##termination-with-sidecars}\nRunbook Content: Termination of Pods {#pod-termination}Pod shutdown and sidecar containers {##termination-with-sidecars}If your Pod includes one or more\n[sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/)\n(init containers with an Always restart policy), the kubelet will delay sending\nthe TERM signal to these sidecar containers until the last main container has fully terminated.\nThe sidecar containers will be terminated in the reverse order they are defined in the Pod spec.\nThis ensures that sidecar containers continue serving the other containers in the Pod until they\nare no longer needed.  \nThis means that slow termination of a main container will also delay the termination of the sidecar containers.\nIf the grace period expires before the termination process is complete, the Pod may enter [forced termination](#pod-termination-beyond-grace-period).\nIn this case, all remaining containers in the Pod will be terminated simultaneously with a short grace period.  \nSimilarly, if the Pod has a `preStop` hook that exceeds the termination grace period, emergency termination may occur.\nIn general, if you have used `preStop` hooks to control the termination order without sidecar containers, you can now\nremove them and allow the kubelet to manage sidecar termination automatically.\n", "relevant_passages": ["How does the termination of sidecar containers work when a Pod is shutting down?"]}
{"query": "A user asked the following question:\nQuestion: How does the Pod garbage collector know when to clean up terminated Pods?\nThis is about the following runbook:\nRunbook Title: Garbage collection of Pods {#pod-garbage-collection}\nRunbook Content: Termination of Pods {#pod-termination}Garbage collection of Pods {#pod-garbage-collection}For failed Pods, the API objects remain in the cluster's API until a human or\n{{< glossary_tooltip term_id=\"controller\" text=\"controller\" >}} process\nexplicitly removes them.  \nThe Pod garbage collector (PodGC), which is a controller in the control plane, cleans up\nterminated Pods (with a phase of `Succeeded` or `Failed`), when the number of Pods exceeds the\nconfigured threshold (determined by `terminated-pod-gc-threshold` in the kube-controller-manager).\nThis avoids a resource leak as Pods are created and terminated over time.  \nAdditionally, PodGC cleans up any Pods which satisfy any of the following conditions:  \n1. are orphan Pods - bound to a node which no longer exists,\n1. are unscheduled terminating Pods,\n1. are terminating Pods, bound to a non-ready node tainted with\n[`node.kubernetes.io/out-of-service`](/docs/reference/labels-annotations-taints/#node-kubernetes-io-out-of-service),\nwhen the `NodeOutOfServiceVolumeDetach` feature gate is enabled.  \nAlong with cleaning up the Pods, PodGC will also mark them as failed if they are in a non-terminal\nphase. Also, PodGC adds a Pod disruption condition when cleaning up an orphan Pod.\nSee [Pod disruption conditions](/docs/concepts/workloads/pods/disruptions#pod-disruption-conditions)\nfor more details.\n", "relevant_passages": ["How does the Pod garbage collector know when to clean up terminated Pods?"]}
{"query": "A user asked the following question:\nQuestion: Which filesystems support idmap mounts in Linux 6.3?\nThis is about the following runbook:\nRunbook Title: {{% heading \"prerequisites\" %}}\nRunbook Content: {{% heading \"prerequisites\" %}}{{% thirdparty-content %}}  \nThis is a Linux-only feature and support is needed in Linux for idmap mounts on\nthe filesystems used. This means:  \n* On the node, the filesystem you use for `/var/lib/kubelet/pods/`, or the\ncustom directory you configure for this, needs idmap mount support.\n* All the filesystems used in the pod's volumes must support idmap mounts.  \nIn practice this means you need at least Linux 6.3, as tmpfs started supporting\nidmap mounts in that version. This is usually needed as several Kubernetes\nfeatures use tmpfs (the service account token that is mounted by default uses a\ntmpfs, Secrets use a tmpfs, etc.)  \nSome popular filesystems that support idmap mounts in Linux 6.3 are: btrfs,\next4, xfs, fat, tmpfs, overlayfs.  \nIn addition, the container runtime and its underlying OCI runtime must support\nuser namespaces. The following OCI runtimes offer support:  \n* [crun](https://github.com/containers/crun) version 1.9 or greater (it's recommend version 1.13+).\n* [runc](https://github.com/opencontainers/runc) version 1.2 or greater  \n{{< note >}}\nSome OCI runtimes do not include the support needed for using user namespaces in\nLinux pods. If you use a managed Kubernetes, or have downloaded it from packages\nand set it up, it's possible that nodes in your cluster use a runtime that doesn't\ninclude this support.\n{{< /note >}}  \nTo use user namespaces with Kubernetes, you also need to use a CRI\n{{< glossary_tooltip text=\"container runtime\" term_id=\"container-runtime\" >}}\nto use this feature with Kubernetes pods:  \n* containerd: version 2.0 (and later) supports user namespaces for containers.\n* CRI-O: version 1.25 (and later) supports user namespaces for containers.  \nYou can see the status of user namespaces support in cri-dockerd tracked in an [issue][CRI-dockerd-issue]\non GitHub.  \n[CRI-dockerd-issue]: https://github.com/Mirantis/cri-dockerd/issues/74\n", "relevant_passages": ["Which filesystems support idmap mounts in Linux 6.3?"]}
{"query": "A user asked the following question:\nQuestion: How does Kubernetes handle a Pod that is unhealthy due to node failure?\nThis is about the following runbook:\nRunbook Title: Pods and fault recovery {#pod-fault-recovery}\nRunbook Content: Pod lifetimePods and fault recovery {#pod-fault-recovery}If one of the containers in the Pod fails, then Kubernetes may try to restart that\nspecific container.\nRead [How Pods handle problems with containers](#container-restarts) to learn more.  \nPods can however fail in a way that the cluster cannot recover from, and in that case\nKubernetes does not attempt to heal the Pod further; instead, Kubernetes deletes the\nPod and relies on other components to provide automatic healing.  \nIf a Pod is scheduled to a {{< glossary_tooltip text=\"node\" term_id=\"node\" >}} and that\nnode then fails, the Pod is treated as unhealthy and Kubernetes eventually deletes the Pod.\nA Pod won't survive an {{< glossary_tooltip text=\"eviction\" term_id=\"eviction\" >}} due to\na lack of resources or Node maintenance.  \nKubernetes uses a higher-level abstraction, called a\n{{< glossary_tooltip term_id=\"controller\" text=\"controller\" >}}, that handles the work of\nmanaging the relatively disposable Pod instances.  \nA given Pod (as defined by a UID) is never \"rescheduled\" to a different node; instead,\nthat Pod can be replaced by a new, near-identical Pod. If you make a replacement Pod, it can\neven have same name (as in `.metadata.name`) that the old Pod had, but the replacement\nwould have a different `.metadata.uid` from the old Pod.  \nKubernetes does not guarantee that a replacement for an existing Pod would be scheduled to\nthe same node as the old Pod that was being replaced.\n", "relevant_passages": ["How does Kubernetes handle a Pod that is unhealthy due to node failure?"]}
{"query": "A user asked the following question:\nQuestion: Do I need to run multiple containers in a Pod for replication?\nThis is about the following runbook:\nRunbook Title: What is a Pod?\nRunbook Content: What is a Pod?{{< note >}}\nYou need to install a [container runtime](/docs/setup/production-environment/container-runtimes/)\ninto each node in the cluster so that Pods can run there.\n{{< /note >}}  \nThe shared context of a Pod is a set of Linux namespaces, cgroups, and\npotentially other facets of isolation - the same things that isolate a {{< glossary_tooltip text=\"container\" term_id=\"container\" >}}. Within a Pod's context, the individual applications may have\nfurther sub-isolations applied.  \nA Pod is similar to a set of containers with shared namespaces and shared filesystem volumes.  \nPods in a Kubernetes cluster are used in two main ways:  \n* **Pods that run a single container**. The \"one-container-per-Pod\" model is the\nmost common Kubernetes use case; in this case, you can think of a Pod as a\nwrapper around a single container; Kubernetes manages Pods rather than managing\nthe containers directly.\n* **Pods that run multiple containers that need to work together**. A Pod can\nencapsulate an application composed of\n[multiple co-located containers](#how-pods-manage-multiple-containers) that are\ntightly coupled and need to share resources. These co-located containers\nform a single cohesive unit.  \nGrouping multiple co-located and co-managed containers in a single Pod is a\nrelatively advanced use case. You should use this pattern only in specific\ninstances in which your containers are tightly coupled.  \nYou don't need to run multiple containers to provide replication (for resilience\nor capacity); if you need multiple replicas, see\n[Workload management](/docs/concepts/workloads/controllers/).\n", "relevant_passages": ["Do I need to run multiple containers in a Pod for replication?"]}
{"query": "A user asked the following question:\nQuestion: What's the difference between init containers and sidecar containers?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- erictune\ntitle: Init Containers\ncontent_type: concept\nweight: 40\n---  \n<!-- overview -->\nThis page provides an overview of init containers: specialized containers that run\nbefore app containers in a {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}}.\nInit containers can contain utilities or setup scripts not present in an app image.  \nYou can specify init containers in the Pod specification alongside the `containers`\narray (which describes app containers).  \nIn Kubernetes, a [sidecar container](/docs/concepts/workloads/pods/sidecar-containers/) is a container that\nstarts before the main application container and _continues to run_. This document is about init containers:\ncontainers that run to completion during Pod initialization.  \n<!-- body -->\n", "relevant_passages": ["What's the difference between init containers and sidecar containers?"]}
{"query": "A user asked the following question:\nQuestion: How can I check the status of my init containers?\nThis is about the following runbook:\nRunbook Title: Understanding init containers\nRunbook Content: Understanding init containersA {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}} can have multiple containers\nrunning apps within it, but it can also have one or more init containers, which are run\nbefore the app containers are started.  \nInit containers are exactly like regular containers, except:  \n* Init containers always run to completion.\n* Each init container must complete successfully before the next one starts.  \nIf a Pod's init container fails, the kubelet repeatedly restarts that init container until it succeeds.\nHowever, if the Pod has a `restartPolicy` of Never, and an init container fails during startup of that Pod, Kubernetes treats the overall Pod as failed.  \nTo specify an init container for a Pod, add the `initContainers` field into\nthe [Pod specification](/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec),\nas an array of `container` items (similar to the app `containers` field and its contents).\nSee [Container](/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container) in the\nAPI reference for more details.  \nThe status of the init containers is returned in `.status.initContainerStatuses`\nfield as an array of the container statuses (similar to the `.status.containerStatuses`\nfield).\n", "relevant_passages": ["How can I check the status of my init containers?"]}
{"query": "A user asked the following question:\nQuestion: Can I add a new container to a Pod after it has been created?\nThis is about the following runbook:\nRunbook Title: Understanding ephemeral containers\nRunbook Content: Understanding ephemeral containers{{< glossary_tooltip text=\"Pods\" term_id=\"pod\" >}} are the fundamental building\nblock of Kubernetes applications. Since Pods are intended to be disposable and\nreplaceable, you cannot add a container to a Pod once it has been created.\nInstead, you usually delete and replace Pods in a controlled fashion using\n{{< glossary_tooltip text=\"deployments\" term_id=\"deployment\" >}}.  \nSometimes it's necessary to inspect the state of an existing Pod, however, for\nexample to troubleshoot a hard-to-reproduce bug. In these cases you can run\nan ephemeral container in an existing Pod to inspect its state and run\narbitrary commands.\n", "relevant_passages": ["Can I add a new container to a Pod after it has been created?"]}
{"query": "A user asked the following question:\nQuestion: What happens to a Pod once it is scheduled and bound to a node?\nThis is about the following runbook:\nRunbook Title: Pod lifetime\nRunbook Content: Pod lifetimeWhilst a Pod is running, the kubelet is able to restart containers to handle some\nkind of faults. Within a Pod, Kubernetes tracks different container\n[states](#container-states) and determines what action to take to make the Pod\nhealthy again.  \nIn the Kubernetes API, Pods have both a specification and an actual status. The\nstatus for a Pod object consists of a set of [Pod conditions](#pod-conditions).\nYou can also inject [custom readiness information](#pod-readiness-gate) into the\ncondition data for a Pod, if that is useful to your application.  \nPods are only [scheduled](/docs/concepts/scheduling-eviction/) once in their lifetime;\nassigning a Pod to a specific node is called _binding_, and the process of selecting\nwhich node to use is called _scheduling_.\nOnce a Pod has been scheduled and is bound to a node, Kubernetes tries\nto run that Pod on the node. The Pod runs on that node until it stops, or until the Pod\nis [terminated](#pod-termination); if Kubernetes isn't able to start the Pod on the selected\nnode (for example, if the node crashes before the Pod starts), then that particular Pod\nnever starts.  \nYou can use [Pod Scheduling Readiness](/docs/concepts/scheduling-eviction/pod-scheduling-readiness/)\nto delay scheduling for a Pod until all its _scheduling gates_ are removed. For example,\nyou might want to define a set of Pods but only trigger scheduling once all the Pods\nhave been created.\n", "relevant_passages": ["What happens to a Pod once it is scheduled and bound to a node?"]}
{"query": "A user asked the following question:\nQuestion: What happens when a container in a Pod crashes for the first time?\nThis is about the following runbook:\nRunbook Title: How Pods handle problems with containers {#container-restarts}\nRunbook Content: How Pods handle problems with containers {#container-restarts}Kubernetes manages container failures within Pods using a [`restartPolicy`](#restart-policy) defined in the Pod `spec`. This policy determines how Kubernetes reacts to containers exiting due to errors or other reasons, which falls in the following sequence:  \n1. **Initial crash**: Kubernetes attempts an immediate restart based on the Pod `restartPolicy`.\n1. **Repeated crashes**: After the initial crash Kubernetes applies an exponential\nbackoff delay for subsequent restarts, described in [`restartPolicy`](#restart-policy).\nThis prevents rapid, repeated restart attempts from overloading the system.\n1. **CrashLoopBackOff state**: This indicates that the backoff delay mechanism is currently\nin effect for a given container that is in a crash loop, failing and restarting repeatedly.\n1. **Backoff reset**: If a container runs successfully for a certain duration\n(e.g., 10 minutes), Kubernetes resets the backoff delay, treating any new crash\nas the first one.  \nIn practice, a `CrashLoopBackOff` is a condition or event that might be seen as output\nfrom the `kubectl` command, while describing or listing Pods, when a container in the Pod\nfails to start properly and then continually tries and fails in a loop.  \nIn other words, when a container enters the crash loop, Kubernetes applies the\nexponential backoff delay mentioned in the [Container restart policy](#restart-policy).\nThis mechanism prevents a faulty container from overwhelming the system with continuous\nfailed start attempts.  \nThe `CrashLoopBackOff` can be caused by issues like the following:  \n* Application errors that cause the container to exit.\n* Configuration errors, such as incorrect environment variables or missing\nconfiguration files.\n* Resource constraints, where the container might not have enough memory or CPU\nto start properly.\n* Health checks failing if the application doesn't start serving within the\nexpected time.\n* Container liveness probes or startup probes returning a `Failure` result\nas mentioned in the [probes section](#container-probes).  \nTo investigate the root cause of a `CrashLoopBackOff` issue, a user can:  \n1. **Check logs**: Use `kubectl logs <name-of-pod>` to check the logs of the container.\nThis is often the most direct way to diagnose the issue causing the crashes.\n1. **Inspect events**: Use `kubectl describe pod <name-of-pod>` to see events\nfor the Pod, which can provide hints about configuration or resource issues.\n1. **Review configuration**: Ensure that the Pod configuration, including\nenvironment variables and mounted volumes, is correct and that all required\nexternal resources are available.\n1. **Check resource limits**: Make sure that the container has enough CPU\nand memory allocated. Sometimes, increasing the resources in the Pod definition\ncan resolve the issue.\n1. **Debug application**: There might exist bugs or misconfigurations in the\napplication code. Running this container image locally or in a development\nenvironment can help diagnose application specific issues.\n", "relevant_passages": ["What happens when a container in a Pod crashes for the first time?"]}
{"query": "A user asked the following question:\nQuestion: What\u2019s the next step for debugging my application pods?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn how to [debug pods using ephemeral containers](/docs/tasks/debug/debug-application/debug-running-pod/#ephemeral-container).\n", "relevant_passages": ["What\u2019s the next step for debugging my application pods?"]}
{"query": "A user asked the following question:\nQuestion: How can I set custom conditions for Pod readiness?\nThis is about the following runbook:\nRunbook Title: Status for Pod readiness {#pod-readiness-status}\nRunbook Content: Pod conditionsStatus for Pod readiness {#pod-readiness-status}The `kubectl patch` command does not support patching object status.\nTo set these `status.conditions` for the Pod, applications and\n{{< glossary_tooltip term_id=\"operator-pattern\" text=\"operators\">}} should use\nthe `PATCH` action.\nYou can use a [Kubernetes client library](/docs/reference/using-api/client-libraries/) to\nwrite code that sets custom Pod conditions for Pod readiness.  \nFor a Pod that uses custom conditions, that Pod is evaluated to be ready **only**\nwhen both the following statements apply:  \n* All containers in the Pod are ready.\n* All conditions specified in `readinessGates` are `True`.  \nWhen a Pod's containers are Ready but at least one custom condition is missing or\n`False`, the kubelet sets the Pod's [condition](#pod-conditions) to `ContainersReady`.\n", "relevant_passages": ["How can I set custom conditions for Pod readiness?"]}
{"query": "A user asked the following question:\nQuestion: How does Kubernetes handle Pods on a node that dies or gets disconnected?\nThis is about the following runbook:\nRunbook Title: Pod phase\nRunbook Content: Pod phaseA Pod's `status` field is a\n[PodStatus](/docs/reference/generated/kubernetes-api/{{< param \"version\" >}}/#podstatus-v1-core)\nobject, which has a `phase` field.  \nThe phase of a Pod is a simple, high-level summary of where the Pod is in its\nlifecycle. The phase is not intended to be a comprehensive rollup of observations\nof container or Pod state, nor is it intended to be a comprehensive state machine.  \nThe number and meanings of Pod phase values are tightly guarded.\nOther than what is documented here, nothing should be assumed about Pods that\nhave a given `phase` value.  \nHere are the possible values for `phase`:  \nValue       | Description\n:-----------|:-----------\n`Pending`   | The Pod has been accepted by the Kubernetes cluster, but one or more of the containers has not been set up and made ready to run. This includes time a Pod spends waiting to be scheduled as well as the time spent downloading container images over the network.\n`Running`   | The Pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting.\n`Succeeded` | All containers in the Pod have terminated in success, and will not be restarted.\n`Failed`    | All containers in the Pod have terminated, and at least one container has terminated in failure. That is, the container either exited with non-zero status or was terminated by the system, and is not set for automatic restarting.\n`Unknown`   | For some reason the state of the Pod could not be obtained. This phase typically occurs due to an error in communicating with the node where the Pod should be running.  \n{{< note >}}  \nWhen a pod is failing to start repeatedly, `CrashLoopBackOff` may appear in the `Status` field of some kubectl commands. Similarly, when a pod is being deleted, `Terminating` may appear in the `Status` field of some kubectl commands.  \nMake sure not to confuse _Status_, a kubectl display field for user intuition, with the pod's `phase`.\nPod phase is an explicit part of the Kubernetes data model and of the\n[Pod API](/docs/reference/kubernetes-api/workload-resources/pod-v1/).  \n```\nNAMESPACE               NAME               READY   STATUS             RESTARTS   AGE\nalessandras-namespace   alessandras-pod    0/1     CrashLoopBackOff   200        2d9h\n```  \n---  \nA Pod is granted a term to terminate gracefully, which defaults to 30 seconds.\nYou can use the flag `--force` to [terminate a Pod by force](/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination-forced).\n{{< /note >}}  \nSince Kubernetes 1.27, the kubelet transitions deleted Pods, except for\n[static Pods](/docs/tasks/configure-pod-container/static-pod/) and\n[force-deleted Pods](/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination-forced)\nwithout a finalizer, to a terminal phase (`Failed` or `Succeeded` depending on\nthe exit statuses of the pod containers) before their deletion from the API server.  \nIf a node dies or is disconnected from the rest of the cluster, Kubernetes\napplies a policy for setting the `phase` of all Pods on the lost node to Failed.\n", "relevant_passages": ["How does Kubernetes handle Pods on a node that dies or gets disconnected?"]}
{"query": "A user asked the following question:\nQuestion: What happens to Pods that are in a non-terminal phase during garbage collection?\nThis is about the following runbook:\nRunbook Title: Garbage collection of Pods {#pod-garbage-collection}\nRunbook Content: Termination of Pods {#pod-termination}Garbage collection of Pods {#pod-garbage-collection}For failed Pods, the API objects remain in the cluster's API until a human or\n{{< glossary_tooltip term_id=\"controller\" text=\"controller\" >}} process\nexplicitly removes them.  \nThe Pod garbage collector (PodGC), which is a controller in the control plane, cleans up\nterminated Pods (with a phase of `Succeeded` or `Failed`), when the number of Pods exceeds the\nconfigured threshold (determined by `terminated-pod-gc-threshold` in the kube-controller-manager).\nThis avoids a resource leak as Pods are created and terminated over time.  \nAdditionally, PodGC cleans up any Pods which satisfy any of the following conditions:  \n1. are orphan Pods - bound to a node which no longer exists,\n1. are unscheduled terminating Pods,\n1. are terminating Pods, bound to a non-ready node tainted with\n[`node.kubernetes.io/out-of-service`](/docs/reference/labels-annotations-taints/#node-kubernetes-io-out-of-service),\nwhen the `NodeOutOfServiceVolumeDetach` feature gate is enabled.  \nAlong with cleaning up the Pods, PodGC will also mark them as failed if they are in a non-terminal\nphase. Also, PodGC adds a Pod disruption condition when cleaning up an orphan Pod.\nSee [Pod disruption conditions](/docs/concepts/workloads/pods/disruptions#pod-disruption-conditions)\nfor more details.\n", "relevant_passages": ["What happens to Pods that are in a non-terminal phase during garbage collection?"]}
{"query": "A user asked the following question:\nQuestion: Can BestEffort Pods use CPU resources that are not assigned to other Pods?\nThis is about the following runbook:\nRunbook Title: BestEffort\nRunbook Content: Quality of Service classesBestEffortPods in the `BestEffort` QoS class can use node resources that aren't specifically assigned\nto Pods in other QoS classes. For example, if you have a node with 16 CPU cores available to the\nkubelet, and you assign 4 CPU cores to a `Guaranteed` Pod, then a Pod in the `BestEffort`\nQoS class can try to use any amount of the remaining 12 CPU cores.  \nThe kubelet prefers to evict `BestEffort` Pods if the node comes under resource pressure.  \n#### Criteria  \nA Pod has a QoS class of `BestEffort` if it doesn't meet the criteria for either `Guaranteed`\nor `Burstable`. In other words, a Pod is `BestEffort` only if none of the Containers in the Pod have a\nmemory limit or a memory request, and none of the Containers in the Pod have a\nCPU limit or a CPU request.\nContainers in a Pod can request other resources (not CPU or memory) and still be classified as\n`BestEffort`.\n", "relevant_passages": ["Can BestEffort Pods use CPU resources that are not assigned to other Pods?"]}
{"query": "A user asked the following question:\nQuestion: What are the reasons for a Pod termination indicated by the `DisruptionTarget` condition?\nThis is about the following runbook:\nRunbook Title: Pod disruption conditions {#pod-disruption-conditions}\nRunbook Content: Pod disruption conditions {#pod-disruption-conditions}{{< feature-state feature_gate_name=\"PodDisruptionConditions\" >}}  \nA dedicated Pod `DisruptionTarget` [condition](/docs/concepts/workloads/pods/pod-lifecycle/#pod-conditions)\nis added to indicate\nthat the Pod is about to be deleted due to a {{<glossary_tooltip term_id=\"disruption\" text=\"disruption\">}}.\nThe `reason` field of the condition additionally\nindicates one of the following reasons for the Pod termination:  \n`PreemptionByScheduler`\n: Pod is due to be {{<glossary_tooltip term_id=\"preemption\" text=\"preempted\">}} by a scheduler in order to accommodate a new Pod with a higher priority. For more information, see [Pod priority preemption](/docs/concepts/scheduling-eviction/pod-priority-preemption/).  \n`DeletionByTaintManager`\n: Pod is due to be deleted by Taint Manager (which is part of the node lifecycle controller within `kube-controller-manager`) due to a `NoExecute` taint that the Pod does not tolerate; see {{<glossary_tooltip term_id=\"taint\" text=\"taint\">}}-based evictions.  \n`EvictionByEvictionAPI`\n: Pod has been marked for {{<glossary_tooltip term_id=\"api-eviction\" text=\"eviction using the Kubernetes API\">}} .  \n`DeletionByPodGC`\n: Pod, that is bound to a no longer existing Node, is due to be deleted by [Pod garbage collection](/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection).  \n`TerminationByKubelet`\n: Pod has been terminated by the kubelet, because of either {{<glossary_tooltip term_id=\"node-pressure-eviction\" text=\"node pressure eviction\">}},\nthe [graceful node shutdown](/docs/concepts/architecture/nodes/#graceful-node-shutdown),\nor preemption for [system critical pods](/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).  \nIn all other disruption scenarios, like eviction due to exceeding\n[Pod container limits](/docs/concepts/configuration/manage-resources-containers/),\nPods don't receive the `DisruptionTarget` condition because the disruptions were\nprobably caused by the Pod and would reoccur on retry.  \n{{< note >}}\nA Pod disruption might be interrupted. The control plane might re-attempt to\ncontinue the disruption of the same Pod, but it is not guaranteed. As a result,\nthe `DisruptionTarget` condition might be added to a Pod, but that Pod might then not actually be\ndeleted. In such a situation, after some time, the\nPod disruption condition will be cleared.\n{{< /note >}}  \nAlong with cleaning up the pods, the Pod garbage collector (PodGC) will also mark them as failed if they are in a non-terminal\nphase (see also [Pod garbage collection](/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection)).  \nWhen using a Job (or CronJob), you may want to use these Pod disruption conditions as part of your Job's\n[Pod failure policy](/docs/concepts/workloads/controllers/job#pod-failure-policy).\n", "relevant_passages": ["What are the reasons for a Pod termination indicated by the `DisruptionTarget` condition?"]}
{"query": "A user asked the following question:\nQuestion: Where can I find more information about container probes?\nThis is about the following runbook:\nRunbook Title: Container probes\nRunbook Content: Container probesA _probe_ is a diagnostic performed periodically by the kubelet on a container. To perform a diagnostic, the kubelet can invoke different actions:  \n- `ExecAction` (performed with the help of the container runtime)\n- `TCPSocketAction` (checked directly by the kubelet)\n- `HTTPGetAction` (checked directly by the kubelet)  \nYou can read more about [probes](/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)\nin the Pod Lifecycle documentation.\n", "relevant_passages": ["Where can I find more information about container probes?"]}
{"query": "A user asked the following question:\nQuestion: Can you have more than one app container in a Pod?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Sidecar Containers\ncontent_type: concept\nweight: 50\n---  \n<!-- overview -->\n{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \nSidecar containers are the secondary containers that run along with the main\napplication container within the same {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}}.\nThese containers are used to enhance or to extend the functionality of the primary _app\ncontainer_ by providing additional services, or functionality such as logging, monitoring,\nsecurity, or data synchronization, without directly altering the primary application code.  \nTypically, you only have one app container in a Pod. For example, if you have a web\napplication that requires a local webserver, the local webserver is a sidecar and the\nweb application itself is the app container.  \n<!-- body -->\n", "relevant_passages": ["Can you have more than one app container in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: How does resource pressure affect Pods in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Some behavior is independent of QoS class {#class-independent-behavior}\nRunbook Content: Some behavior is independent of QoS class {#class-independent-behavior}Certain behavior is independent of the QoS class assigned by Kubernetes. For example:  \n* Any Container exceeding a resource limit will be killed and restarted by the kubelet without\naffecting other Containers in that Pod.  \n* If a Container exceeds its resource request and the node it runs on faces\nresource pressure, the Pod it is in becomes a candidate for [eviction](/docs/concepts/scheduling-eviction/node-pressure-eviction/).\nIf this occurs, all Containers in the Pod will be terminated. Kubernetes may create a\nreplacement Pod, usually on a different node.  \n* The resource request of a Pod is equal to the sum of the resource requests of\nits component Containers, and the resource limit of a Pod is equal to the sum of\nthe resource limits of its component Containers.  \n* The kube-scheduler does not consider QoS class when selecting which Pods to\n[preempt](/docs/concepts/scheduling-eviction/pod-priority-preemption/#preemption).\nPreemption can occur when a cluster does not have enough resources to run all the Pods\nyou defined.\n", "relevant_passages": ["How does resource pressure affect Pods in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What are sidecar containers used for in a Pod?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\ntitle: Sidecar Containers\ncontent_type: concept\nweight: 50\n---  \n<!-- overview -->\n{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \nSidecar containers are the secondary containers that run along with the main\napplication container within the same {{< glossary_tooltip text=\"Pod\" term_id=\"pod\" >}}.\nThese containers are used to enhance or to extend the functionality of the primary _app\ncontainer_ by providing additional services, or functionality such as logging, monitoring,\nsecurity, or data synchronization, without directly altering the primary application code.  \nTypically, you only have one app container in a Pod. For example, if you have a web\napplication that requires a local webserver, the local webserver is a sidecar and the\nweb application itself is the app container.  \n<!-- body -->\n", "relevant_passages": ["What are sidecar containers used for in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: How can I force delete a Pod immediately using kubectl?\nThis is about the following runbook:\nRunbook Title: Forced Pod termination {#pod-termination-forced}\nRunbook Content: Termination of Pods {#pod-termination}Forced Pod termination {#pod-termination-forced}{{< caution >}}\nForced deletions can be potentially disruptive for some workloads and their Pods.\n{{< /caution >}}  \nBy default, all deletes are graceful within 30 seconds. The `kubectl delete` command supports\nthe `--grace-period=<seconds>` option which allows you to override the default and specify your\nown value.  \nSetting the grace period to `0` forcibly and immediately deletes the Pod from the API\nserver. If the Pod was still running on a node, that forcible deletion triggers the kubelet to\nbegin immediate cleanup.  \nUsing kubectl, You must specify an additional flag `--force` along with `--grace-period=0`\nin order to perform force deletions.  \nWhen a force deletion is performed, the API server does not wait for confirmation\nfrom the kubelet that the Pod has been terminated on the node it was running on. It\nremoves the Pod in the API immediately so a new Pod can be created with the same\nname. On the node, Pods that are set to terminate immediately will still be given\na small grace period before being force killed.  \n{{< caution >}}\nImmediate deletion does not wait for confirmation that the running resource has been terminated.\nThe resource may continue to run on the cluster indefinitely.\n{{< /caution >}}  \nIf you need to force-delete Pods that are part of a StatefulSet, refer to the task\ndocumentation for\n[deleting Pods from a StatefulSet](/docs/tasks/run-application/force-delete-stateful-set-pod/).\n", "relevant_passages": ["How can I force delete a Pod immediately using kubectl?"]}
{"query": "A user asked the following question:\nQuestion: How does kubelet manage multiple init containers in a Pod?\nThis is about the following runbook:\nRunbook Title: Differences from regular containers\nRunbook Content: Understanding init containersDifferences from regular containersInit containers support all the fields and features of app containers,\nincluding resource limits, [volumes](/docs/concepts/storage/volumes/), and security settings. However, the\nresource requests and limits for an init container are handled differently,\nas documented in [Resource sharing within containers](#resource-sharing-within-containers).  \nRegular init containers (in other words: excluding sidecar containers) do not support the\n`lifecycle`, `livenessProbe`, `readinessProbe`, or `startupProbe` fields. Init containers\nmust run to completion before the Pod can be ready; sidecar containers continue running\nduring a Pod's lifetime, and _do_ support some probes. See [sidecar container](/docs/concepts/workloads/pods/sidecar-containers/)\nfor further details about sidecar containers.  \nIf you specify multiple init containers for a Pod, kubelet runs each init\ncontainer sequentially. Each init container must succeed before the next can run.\nWhen all of the init containers have run to completion, kubelet initializes\nthe application containers for the Pod and runs them as usual.\n", "relevant_passages": ["How does kubelet manage multiple init containers in a Pod?"]}
{"query": "A user asked the following question:\nQuestion: Is there a way to access Container-level fields in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Available fields\nRunbook Content: Available fieldsOnly some Kubernetes API fields are available through the downward API. This\nsection lists which fields you can make available.  \nYou can pass information from available Pod-level fields using `fieldRef`.\nAt the API level, the `spec` for a Pod always defines at least one\n[Container](/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container).\nYou can pass information from available Container-level fields using\n`resourceFieldRef`.\n", "relevant_passages": ["Is there a way to access Container-level fields in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What happens if a container using user namespaces escapes to the host?\nThis is about the following runbook:\nRunbook Title: Understanding user namespaces for pods {#pods-and-userns}\nRunbook Content: Understanding user namespaces for pods {#pods-and-userns}Several container runtimes with their default configuration (like Docker Engine,\ncontainerd, CRI-O) use Linux namespaces for isolation. Other technologies exist\nand can be used with those runtimes too (e.g. Kata Containers uses VMs instead of\nLinux namespaces). This page is applicable for container runtimes using Linux\nnamespaces for isolation.  \nWhen creating a pod, by default, several new namespaces are used for isolation:\na network namespace to isolate the network of the container, a PID namespace to\nisolate the view of processes, etc. If a user namespace is used, this will\nisolate the users in the container from the users in the node.  \nThis means containers can run as root and be mapped to a non-root user on the\nhost. Inside the container the process will think it is running as root (and\ntherefore tools like `apt`, `yum`, etc. work fine), while in reality the process\ndoesn't have privileges on the host. You can verify this, for example, if you\ncheck which user the container process is running by executing `ps aux` from\nthe host. The user `ps` shows is not the same as the user you see if you\nexecute inside the container the command `id`.  \nThis abstraction limits what can happen, for example, if the container manages\nto escape to the host. Given that the container is running as a non-privileged\nuser on the host, it is limited what it can do to the host.  \nFurthermore, as users on each pod will be mapped to different non-overlapping\nusers in the host, it is limited what they can do to other pods too.  \nCapabilities granted to a pod are also limited to the pod user namespace and\nmostly invalid out of it, some are even completely void. Here are two examples:\n- `CAP_SYS_MODULE` does not have any effect if granted to a pod using user\nnamespaces, the pod isn't able to load kernel modules.\n- `CAP_SYS_ADMIN` is limited to the pod's user namespace and invalid outside\nof it.  \nWithout using a user namespace a container running as root, in the case of a\ncontainer breakout, has root privileges on the node. And if some capability were\ngranted to the container, the capabilities are valid on the host too. None of\nthis is true when we use user namespaces.  \nIf you want to know more details about what changes when user namespaces are in\nuse, see `man 7 user_namespaces`.\n", "relevant_passages": ["What happens if a container using user namespaces escapes to the host?"]}
{"query": "A user asked the following question:\nQuestion: What are the different types of probes I can use in my Pods?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}Learn more about the following:\n* [Creating a Pod that has an init container](/docs/tasks/configure-pod-container/configure-pod-initialization/#create-a-pod-that-has-an-init-container).\n* [Debug init containers](/docs/tasks/debug/debug-application/debug-init-containers/).\n* Overview of [kubelet](/docs/reference/command-line-tools-reference/kubelet/) and [kubectl](/docs/reference/kubectl/).\n* [Types of probes](/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe): liveness, readiness, startup probe.\n* [Sidecar containers](/docs/concepts/workloads/pods/sidecar-containers).\n", "relevant_passages": ["What are the different types of probes I can use in my Pods?"]}
{"query": "A user asked the following question:\nQuestion: How can I protect my application in Kubernetes?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Follow steps to protect your application by [configuring a Pod Disruption Budget](/docs/tasks/run-application/configure-pdb/).  \n* Learn more about [draining nodes](/docs/tasks/administer-cluster/safely-drain-node/)  \n* Learn about [updating a deployment](/docs/concepts/workloads/controllers/deployment/#updating-a-deployment)\nincluding steps to maintain its availability during the rollout.\n", "relevant_passages": ["How can I protect my application in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: What\u2019s the best way to perform a health check using gRPC?\nThis is about the following runbook:\nRunbook Title: Check mechanisms {#probe-check-methods}\nRunbook Content: Container probesCheck mechanisms {#probe-check-methods}There are four different ways to check a container using a probe.\nEach probe must define exactly one of these four mechanisms:  \n`exec`\n: Executes a specified command inside the container. The diagnostic\nis considered successful if the command exits with a status code of 0.  \n`grpc`\n: Performs a remote procedure call using [gRPC](https://grpc.io/).\nThe target should implement\n[gRPC health checks](https://grpc.io/grpc/core/md_doc_health-checking.html).\nThe diagnostic is considered successful if the `status`\nof the response is `SERVING`.  \n`httpGet`\n: Performs an HTTP `GET` request against the Pod's IP\naddress on a specified port and path. The diagnostic is\nconsidered successful if the response has a status code\ngreater than or equal to 200 and less than 400.  \n`tcpSocket`\n: Performs a TCP check against the Pod's IP address on\na specified port. The diagnostic is considered successful if\nthe port is open. If the remote system (the container) closes\nthe connection immediately after it opens, this counts as healthy.  \n{{< caution >}} Unlike the other mechanisms, `exec` probe's implementation involves the creation/forking of multiple processes each time when executed.\nAs a result, in case of the clusters having higher pod densities, lower intervals of `initialDelaySeconds`, `periodSeconds`, configuring any probe with exec mechanism might introduce an overhead on the cpu usage of the node.\nIn such scenarios, consider using the alternative probe mechanisms to avoid the overhead.{{< /caution >}}\n", "relevant_passages": ["What\u2019s the best way to perform a health check using gRPC?"]}
{"query": "A user asked the following question:\nQuestion: What happens to init containers in a Pod before the app containers start?\nThis is about the following runbook:\nRunbook Title: Pods with multiple containers {#how-pods-manage-multiple-containers}\nRunbook Content: Pods with multiple containers {#how-pods-manage-multiple-containers}Pods are designed to support multiple cooperating processes (as containers) that form\na cohesive unit of service. The containers in a Pod are automatically co-located and\nco-scheduled on the same physical or virtual machine in the cluster. The containers\ncan share resources and dependencies, communicate with one another, and coordinate\nwhen and how they are terminated.  \n<!--intentionally repeats some text from earlier in the page, with more detail -->\nPods in a Kubernetes cluster are used in two main ways:  \n* **Pods that run a single container**. The \"one-container-per-Pod\" model is the\nmost common Kubernetes use case; in this case, you can think of a Pod as a\nwrapper around a single container; Kubernetes manages Pods rather than managing\nthe containers directly.\n* **Pods that run multiple containers that need to work together**. A Pod can\nencapsulate an application composed of\nmultiple co-located containers that are\ntightly coupled and need to share resources. These co-located containers\nform a single cohesive unit of service\u2014for example, one container serving data\nstored in a shared volume to the public, while a separate\n{{< glossary_tooltip text=\"sidecar container\" term_id=\"sidecar-container\" >}}\nrefreshes or updates those files.\nThe Pod wraps these containers, storage resources, and an ephemeral network\nidentity together as a single unit.  \nFor example, you might have a container that\nacts as a web server for files in a shared volume, and a separate\n[sidecar container](/docs/concepts/workloads/pods/sidecar-containers/)\nthat updates those files from a remote source, as in the following diagram:  \n{{< figure src=\"/images/docs/pod.svg\" alt=\"Pod creation diagram\" class=\"diagram-medium\" >}}  \nSome Pods have {{< glossary_tooltip text=\"init containers\" term_id=\"init-container\" >}}\nas well as {{< glossary_tooltip text=\"app containers\" term_id=\"app-container\" >}}.\nBy default, init containers run and complete before the app containers are started.  \nYou can also have [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/)\nthat provide auxiliary services to the main application Pod (for example: a service mesh).  \n{{< feature-state for_k8s_version=\"v1.29\" state=\"beta\" >}}  \nEnabled by default, the `SidecarContainers` [feature gate](/docs/reference/command-line-tools-reference/feature-gates/)\nallows you to specify `restartPolicy: Always` for init containers.\nSetting the `Always` restart policy ensures that the containers where you set it are\ntreated as _sidecars_ that are kept running during the entire lifetime of the Pod.\nContainers that you explicitly define as sidecar containers\nstart up before the main application Pod and remain running until the Pod is\nshut down.\n", "relevant_passages": ["What happens to init containers in a Pod before the app containers start?"]}
{"query": "A user asked the following question:\nQuestion: How do I enable user namespaces for a pod?\nThis is about the following runbook:\nRunbook Title: Introduction\nRunbook Content: IntroductionUser namespaces is a Linux feature that allows to map users in the container to\ndifferent users in the host. Furthermore, the capabilities granted to a pod in\na user namespace are valid only in the namespace and void outside of it.  \nA pod can opt-in to use user namespaces by setting the `pod.spec.hostUsers` field\nto `false`.  \nThe kubelet will pick host UIDs/GIDs a pod is mapped to, and will do so in a way\nto guarantee that no two pods on the same node use the same mapping.  \nThe `runAsUser`, `runAsGroup`, `fsGroup`, etc. fields in the `pod.spec` always\nrefer to the user inside the container.  \nThe valid UIDs/GIDs when this feature is enabled is the range 0-65535. This\napplies to files and processes (`runAsUser`, `runAsGroup`, etc.).  \nFiles using a UID/GID outside this range will be seen as belonging to the\noverflow ID, usually 65534 (configured in `/proc/sys/kernel/overflowuid` and\n`/proc/sys/kernel/overflowgid`). However, it is not possible to modify those\nfiles, even by running as the 65534 user/group.  \nMost applications that need to run as root but don't access other host\nnamespaces or resources, should continue to run fine without any changes needed\nif user namespaces is activated.\n", "relevant_passages": ["How do I enable user namespaces for a pod?"]}
{"query": "A user asked the following question:\nQuestion: Can I use ephemeral containers to build applications?\nThis is about the following runbook:\nRunbook Title: \nRunbook Content: ---\nreviewers:\n- verb\n- yujuhong\ntitle: Ephemeral Containers\ncontent_type: concept\nweight: 60\n---  \n<!-- overview -->  \n{{< feature-state state=\"stable\" for_k8s_version=\"v1.25\" >}}  \nThis page provides an overview of ephemeral containers: a special type of container\nthat runs temporarily in an existing {{< glossary_tooltip term_id=\"pod\" >}} to\naccomplish user-initiated actions such as troubleshooting. You use ephemeral\ncontainers to inspect services rather than to build applications.  \n<!-- body -->\n", "relevant_passages": ["Can I use ephemeral containers to build applications?"]}
{"query": "A user asked the following question:\nQuestion: What is RuntimeClass and how do I use it for Pods?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn about the [lifecycle of a Pod](/docs/concepts/workloads/pods/pod-lifecycle/).\n* Learn about [RuntimeClass](/docs/concepts/containers/runtime-class/) and how you can use it to\nconfigure different Pods with different container runtime configurations.\n* Read about [PodDisruptionBudget](/docs/concepts/workloads/pods/disruptions/) and how you can use it to manage application availability during disruptions.\n* Pod is a top-level resource in the Kubernetes REST API.\nThe {{< api-reference page=\"workload-resources/pod-v1\" >}}\nobject definition describes the object in detail.\n* [The Distributed System Toolkit: Patterns for Composite Containers](/blog/2015/06/the-distributed-system-toolkit-patterns/) explains common layouts for Pods with more than one container.\n* Read about [Pod topology spread constraints](/docs/concepts/scheduling-eviction/topology-spread-constraints/)  \nTo understand the context for why Kubernetes wraps a common Pod API in other resources (such as {{< glossary_tooltip text=\"StatefulSets\" term_id=\"statefulset\" >}} or {{< glossary_tooltip text=\"Deployments\" term_id=\"deployment\" >}}), you can read about the prior art, including:  \n* [Aurora](https://aurora.apache.org/documentation/latest/reference/configuration/#job-schema)\n* [Borg](https://research.google.com/pubs/pub43438.html)\n* [Marathon](https://github.com/d2iq-archive/marathon)\n* [Omega](https://research.google/pubs/pub41684/)\n* [Tupperware](https://engineering.fb.com/data-center-engineering/tupperware/).\n", "relevant_passages": ["What is RuntimeClass and how do I use it for Pods?"]}
{"query": "A user asked the following question:\nQuestion: Is there a connection between Init containers and sidecar containers regarding resource management?\nThis is about the following runbook:\nRunbook Title: Init containers and Linux cgroups {#cgroups}\nRunbook Content: Detailed behaviorInit containers and Linux cgroups {#cgroups}On Linux, resource allocations for Pod level control groups (cgroups) are based on the effective Pod\nrequest and limit, the same as the scheduler.  \n{{< comment >}}\nThis section also present under [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/) page.\nIf you're editing this section, change both places.\n{{< /comment >}}\n", "relevant_passages": ["Is there a connection between Init containers and sidecar containers regarding resource management?"]}
{"query": "A user asked the following question:\nQuestion: Where can I find more information about working with Pods?\nThis is about the following runbook:\nRunbook Title: Using Pods\nRunbook Content: Using PodsThe following is an example of a Pod which consists of a container running the image `nginx:1.14.2`.  \n{{% code_sample file=\"pods/simple-pod.yaml\" %}}  \nTo create the Pod shown above, run the following command:\n```shell\nkubectl apply -f https://k8s.io/examples/pods/simple-pod.yaml\n```  \nPods are generally not created directly and are created using workload resources.\nSee [Working with Pods](#working-with-pods) for more information on how Pods are used\nwith workload resources.\n", "relevant_passages": ["Where can I find more information about working with Pods?"]}
{"query": "A user asked the following question:\nQuestion: Can init containers help with security in my app container?\nThis is about the following runbook:\nRunbook Title: Using init containers\nRunbook Content: Using init containersBecause init containers have separate images from app containers, they\nhave some advantages for start-up related code:  \n* Init containers can contain utilities or custom code for setup that are not present in an app\nimage. For example, there is no need to make an image `FROM` another image just to use a tool like\n`sed`, `awk`, `python`, or `dig` during setup.\n* The application image builder and deployer roles can work independently without\nthe need to jointly build a single app image.\n* Init containers can run with a different view of the filesystem than app containers in the\nsame Pod. Consequently, they can be given access to\n{{< glossary_tooltip text=\"Secrets\" term_id=\"secret\" >}} that app containers cannot access.\n* Because init containers run to completion before any app containers start, init containers offer\na mechanism to block or delay app container startup until a set of preconditions are met. Once\npreconditions are met, all of the app containers in a Pod can start in parallel.\n* Init containers can securely run utilities or custom code that would otherwise make an app\ncontainer image less secure. By keeping unnecessary tools separate you can limit the attack\nsurface of your app container image.\n", "relevant_passages": ["Can init containers help with security in my app container?"]}
{"query": "A user asked the following question:\nQuestion: Can Guaranteed Pods use exclusive CPUs?\nThis is about the following runbook:\nRunbook Title: Guaranteed\nRunbook Content: Quality of Service classesGuaranteedPods that are `Guaranteed` have the strictest resource limits and are least likely\nto face eviction. They are guaranteed not to be killed until they exceed their limits\nor there are no lower-priority Pods that can be preempted from the Node. They may\nnot acquire resources beyond their specified limits. These Pods can also make\nuse of exclusive CPUs using the\n[`static`](/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) CPU management policy.  \n#### Criteria  \nFor a Pod to be given a QoS class of `Guaranteed`:  \n* Every Container in the Pod must have a memory limit and a memory request.\n* For every Container in the Pod, the memory limit must equal the memory request.\n* Every Container in the Pod must have a CPU limit and a CPU request.\n* For every Container in the Pod, the CPU limit must equal the CPU request.\n", "relevant_passages": ["Can Guaranteed Pods use exclusive CPUs?"]}
{"query": "A user asked the following question:\nQuestion: What should containers do to communicate with other Pods?\nThis is about the following runbook:\nRunbook Title: Pod networking\nRunbook Content: Resource sharing and communicationPod networkingEach Pod is assigned a unique IP address for each address family. Every\ncontainer in a Pod shares the network namespace, including the IP address and\nnetwork ports. Inside a Pod (and **only** then), the containers that belong to the Pod\ncan communicate with one another using `localhost`. When containers in a Pod communicate\nwith entities *outside the Pod*,\nthey must coordinate how they use the shared network resources (such as ports).\nWithin a Pod, containers share an IP address and port space, and\ncan find each other via `localhost`. The containers in a Pod can also communicate\nwith each other using standard inter-process communications like SystemV semaphores\nor POSIX shared memory.  Containers in different Pods have distinct IP addresses\nand can not communicate by OS-level IPC without special configuration.\nContainers that want to interact with a container running in a different Pod can\nuse IP networking to communicate.  \nContainers within the Pod see the system hostname as being the same as the configured\n`name` for the Pod. There's more about this in the [networking](/docs/concepts/cluster-administration/networking/)\nsection.\n", "relevant_passages": ["What should containers do to communicate with other Pods?"]}
{"query": "A user asked the following question:\nQuestion: What happens if I don't set CPU and memory limits for my container?\nThis is about the following runbook:\nRunbook Title: Information available via `resourceFieldRef` {#downwardapi-resourceFieldRef}\nRunbook Content: Available fieldsInformation available via `resourceFieldRef` {#downwardapi-resourceFieldRef}These container-level fields allow you to provide information about\n[requests and limits](/docs/concepts/configuration/manage-resources-containers/#requests-and-limits)\nfor resources such as CPU and memory.  \n`resource: limits.cpu`\n: A container's CPU limit  \n`resource: requests.cpu`\n: A container's CPU request  \n`resource: limits.memory`\n: A container's memory limit  \n`resource: requests.memory`\n: A container's memory request  \n`resource: limits.hugepages-*`\n: A container's hugepages limit  \n`resource: requests.hugepages-*`\n: A container's hugepages request  \n`resource: limits.ephemeral-storage`\n: A container's ephemeral-storage limit  \n`resource: requests.ephemeral-storage`\n: A container's ephemeral-storage request  \n#### Fallback information for resource limits  \nIf CPU and memory limits are not specified for a container, and you use the\ndownward API to try to expose that information, then the\nkubelet defaults to exposing the maximum allocatable value for CPU and memory\nbased on the [node allocatable](/docs/tasks/administer-cluster/reserve-compute-resources/#node-allocatable)\ncalculation.\n", "relevant_passages": ["What happens if I don't set CPU and memory limits for my container?"]}
{"query": "A user asked the following question:\nQuestion: How do I set up a sidecar container in a Kubernetes deployment?\nThis is about the following runbook:\nRunbook Title: Example application {#sidecar-example}\nRunbook Content: Sidecar containers in Kubernetes {#pod-sidecar-containers}Example application {#sidecar-example}Here's an example of a Deployment with two containers, one of which is a sidecar:  \n{{% code_sample language=\"yaml\" file=\"application/deployment-sidecar.yaml\" %}}\n", "relevant_passages": ["How do I set up a sidecar container in a Kubernetes deployment?"]}
{"query": "A user asked the following question:\nQuestion: What determines the cgroups for a Pod in Linux?\nThis is about the following runbook:\nRunbook Title: Init containers and Linux cgroups {#cgroups}\nRunbook Content: Detailed behaviorInit containers and Linux cgroups {#cgroups}On Linux, resource allocations for Pod level control groups (cgroups) are based on the effective Pod\nrequest and limit, the same as the scheduler.  \n{{< comment >}}\nThis section also present under [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/) page.\nIf you're editing this section, change both places.\n{{< /comment >}}\n", "relevant_passages": ["What determines the cgroups for a Pod in Linux?"]}
{"query": "A user asked the following question:\nQuestion: Why should we separate the Cluster Owner and Application Owner roles?\nThis is about the following runbook:\nRunbook Title: Separating Cluster Owner and Application Owner Roles\nRunbook Content: Separating Cluster Owner and Application Owner RolesOften, it is useful to think of the Cluster Manager\nand Application Owner as separate roles with limited knowledge\nof each other.   This separation of responsibilities\nmay make sense in these scenarios:  \n- when there are many application teams sharing a Kubernetes cluster, and\nthere is natural specialization of roles\n- when third-party tools or services are used to automate cluster management  \nPod Disruption Budgets support this separation of roles by providing an\ninterface between the roles.  \nIf you do not have such a separation of responsibilities in your organization,\nyou may not need to use Pod Disruption Budgets.\n", "relevant_passages": ["Why should we separate the Cluster Owner and Application Owner roles?"]}
{"query": "A user asked the following question:\nQuestion: How can I write applications that tolerate disruptions in my cluster?\nThis is about the following runbook:\nRunbook Title: How to perform Disruptive Actions on your Cluster\nRunbook Content: How to perform Disruptive Actions on your ClusterIf you are a Cluster Administrator, and you need to perform a disruptive action on all\nthe nodes in your cluster, such as a node or system software upgrade, here are some options:  \n- Accept downtime during the upgrade.\n- Failover to another complete replica cluster.\n-  No downtime, but may be costly both for the duplicated nodes\nand for human effort to orchestrate the switchover.\n- Write disruption tolerant applications and use PDBs.\n- No downtime.\n- Minimal resource duplication.\n- Allows more automation of cluster administration.\n- Writing disruption-tolerant applications is tricky, but the work to tolerate voluntary\ndisruptions largely overlaps with work to support autoscaling and tolerating\ninvoluntary disruptions.\n", "relevant_passages": ["How can I write applications that tolerate disruptions in my cluster?"]}
{"query": "A user asked the following question:\nQuestion: How can I debug pods using ephemeral containers?\nThis is about the following runbook:\nRunbook Title: {{% heading \"whatsnext\" %}}\nRunbook Content: {{% heading \"whatsnext\" %}}* Learn how to [debug pods using ephemeral containers](/docs/tasks/debug/debug-application/debug-running-pod/#ephemeral-container).\n", "relevant_passages": ["How can I debug pods using ephemeral containers?"]}
{"query": "A user asked the following question:\nQuestion: What happens if the `preStop` hook takes longer than the grace period?\nThis is about the following runbook:\nRunbook Title: Termination of Pods {#pod-termination}\nRunbook Content: Termination of Pods {#pod-termination}Because Pods represent processes running on nodes in the cluster, it is important to\nallow those processes to gracefully terminate when they are no longer needed (rather\nthan being abruptly stopped with a `KILL` signal and having no chance to clean up).  \nThe design aim is for you to be able to request deletion and know when processes\nterminate, but also be able to ensure that deletes eventually complete.\nWhen you request deletion of a Pod, the cluster records and tracks the intended grace period\nbefore the Pod is allowed to be forcefully killed. With that forceful shutdown tracking in\nplace, the {{< glossary_tooltip text=\"kubelet\" term_id=\"kubelet\" >}} attempts graceful\nshutdown.  \nTypically, with this graceful termination of the pod, kubelet makes requests to the container runtime to attempt to stop the containers in the pod by first sending a TERM (aka. SIGTERM) signal, with a grace period timeout, to the main process in each container. The requests to stop the containers are processed by the container runtime asynchronously. There is no guarantee to the order of processing for these requests. Many container runtimes respect the `STOPSIGNAL` value defined in the container image and, if different, send the container image configured STOPSIGNAL instead of TERM.\nOnce the grace period has expired, the KILL signal is sent to any remaining\nprocesses, and the Pod is then deleted from the\n{{< glossary_tooltip text=\"API Server\" term_id=\"kube-apiserver\" >}}. If the kubelet or the\ncontainer runtime's management service is restarted while waiting for processes to terminate, the\ncluster retries from the start including the full original grace period.  \nPod termination flow, illustrated with an example:  \n1. You use the `kubectl` tool to manually delete a specific Pod, with the default grace period\n(30 seconds).  \n1. The Pod in the API server is updated with the time beyond which the Pod is considered \"dead\"\nalong with the grace period.\nIf you use `kubectl describe` to check the Pod you're deleting, that Pod shows up as \"Terminating\".\nOn the node where the Pod is running: as soon as the kubelet sees that a Pod has been marked\nas terminating (a graceful shutdown duration has been set), the kubelet begins the local Pod\nshutdown process.  \n1. If one of the Pod's containers has defined a `preStop`\n[hook](/docs/concepts/containers/container-lifecycle-hooks) and the `terminationGracePeriodSeconds`\nin the Pod spec is not set to 0, the kubelet runs that hook inside of the container.\nThe default `terminationGracePeriodSeconds` setting is 30 seconds.  \nIf the `preStop` hook is still running after the grace period expires, the kubelet requests\na small, one-off grace period extension of 2 seconds.\n{{% note %}}\nIf the `preStop` hook needs longer to complete than the default grace period allows,\nyou must modify `terminationGracePeriodSeconds` to suit this.\n{{% /note %}}  \n1. The kubelet triggers the container runtime to send a TERM signal to process 1 inside each\ncontainer.  \nThere is [special ordering](#termination-with-sidecars) if the Pod has any\n{{< glossary_tooltip text=\"sidecar containers\" term_id=\"sidecar-container\" >}} defined.\nOtherwise, the containers in the Pod receive the TERM signal at different times and in\nan arbitrary order. If the order of shutdowns matters, consider using a `preStop` hook\nto synchronize (or switch to using sidecar containers).  \n1. At the same time as the kubelet is starting graceful shutdown of the Pod, the control plane\nevaluates whether to remove that shutting-down Pod from EndpointSlice (and Endpoints) objects,\nwhere those objects represent a {{< glossary_tooltip term_id=\"service\" text=\"Service\" >}}\nwith a configured {{< glossary_tooltip text=\"selector\" term_id=\"selector\" >}}.\n{{< glossary_tooltip text=\"ReplicaSets\" term_id=\"replica-set\" >}} and other workload resources\nno longer treat the shutting-down Pod as a valid, in-service replica.  \nPods that shut down slowly should not continue to serve regular traffic and should start\nterminating and finish processing open connections.  Some applications need to go beyond\nfinishing open connections and need more graceful termination, for example, session draining\nand completion.  \nAny endpoints that represent the terminating Pods are not immediately removed from\nEndpointSlices, and a status indicating [terminating state](/docs/concepts/services-networking/endpoint-slices/#conditions)\nis exposed from the EndpointSlice API (and the legacy Endpoints API).\nTerminating endpoints always have their `ready` status as `false` (for backward compatibility\nwith versions before 1.26), so load balancers will not use it for regular traffic.  \nIf traffic draining on terminating Pod is needed, the actual readiness can be checked as a\ncondition `serving`.  You can find more details on how to implement connections draining in the\ntutorial [Pods And Endpoints Termination Flow](/docs/tutorials/services/pods-and-endpoint-termination-flow/)  \n<a id=\"pod-termination-beyond-grace-period\" />  \n1. The kubelet ensures the Pod is shut down and terminated\n1. When the grace period expires, if there is still any container running in the Pod, the\nkubelet triggers forcible shutdown.\nThe container runtime sends `SIGKILL` to any processes still running in any container in the Pod.\nThe kubelet also cleans up a hidden `pause` container if that container runtime uses one.\n1. The kubelet transitions the Pod into a terminal phase (`Failed` or `Succeeded` depending on\nthe end state of its containers).\n1. The kubelet triggers forcible removal of the Pod object from the API server, by setting grace period\nto 0 (immediate deletion).\n1. The API server deletes the Pod's API object, which is then no longer visible from any client.\n", "relevant_passages": ["What happens if the `preStop` hook takes longer than the grace period?"]}
{"query": "A user asked the following question:\nQuestion: How does a StatefulSet handle changes to its Pod template?\nThis is about the following runbook:\nRunbook Title: Pod templates\nRunbook Content: Working with PodsPod templatesControllers for {{< glossary_tooltip text=\"workload\" term_id=\"workload\" >}} resources create Pods\nfrom a _pod template_ and manage those Pods on your behalf.  \nPodTemplates are specifications for creating Pods, and are included in workload resources such as\n[Deployments](/docs/concepts/workloads/controllers/deployment/),\n[Jobs](/docs/concepts/workloads/controllers/job/), and\n[DaemonSets](/docs/concepts/workloads/controllers/daemonset/).  \nEach controller for a workload resource uses the `PodTemplate` inside the workload\nobject to make actual Pods. The `PodTemplate` is part of the desired state of whatever\nworkload resource you used to run your app.  \nWhen you create a Pod, you can include\n[environment variables](/docs/tasks/inject-data-application/define-environment-variable-container/)\nin the Pod template for the containers that run in the Pod.  \nThe sample below is a manifest for a simple Job with a `template` that starts one\ncontainer. The container in that Pod prints a message then pauses.  \n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\nname: hello\nspec:\ntemplate:\n# This is the pod template\nspec:\ncontainers:\n- name: hello\nimage: busybox:1.28\ncommand: ['sh', '-c', 'echo \"Hello, Kubernetes!\" && sleep 3600']\nrestartPolicy: OnFailure\n# The pod template ends here\n```  \nModifying the pod template or switching to a new pod template has no direct effect\non the Pods that already exist. If you change the pod template for a workload\nresource, that resource needs to create replacement Pods that use the updated template.  \nFor example, the StatefulSet controller ensures that the running Pods match the current\npod template for each StatefulSet object. If you edit the StatefulSet to change its pod\ntemplate, the StatefulSet starts to create new Pods based on the updated template.\nEventually, all of the old Pods are replaced with new Pods, and the update is complete.  \nEach workload resource implements its own rules for handling changes to the Pod template.\nIf you want to read more about StatefulSet specifically, read\n[Update strategy](/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets) in the StatefulSet Basics tutorial.  \nOn Nodes, the {{< glossary_tooltip term_id=\"kubelet\" text=\"kubelet\" >}} does not\ndirectly observe or manage any of the details around pod templates and updates; those\ndetails are abstracted away. That abstraction and separation of concerns simplifies\nsystem semantics, and makes it feasible to extend the cluster's behavior without\nchanging existing code.\n", "relevant_passages": ["How does a StatefulSet handle changes to its Pod template?"]}
{"query": "A user asked the following question:\nQuestion: What happens when a Node fails in terms of Pod management?\nThis is about the following runbook:\nRunbook Title: Pods and controllers\nRunbook Content: Working with PodsPods and controllersYou can use workload resources to create and manage multiple Pods for you. A controller\nfor the resource handles replication and rollout and automatic healing in case of\nPod failure. For example, if a Node fails, a controller notices that Pods on that\nNode have stopped working and creates a replacement Pod. The scheduler places the\nreplacement Pod onto a healthy Node.  \nHere are some examples of workload resources that manage one or more Pods:  \n* {{< glossary_tooltip text=\"Deployment\" term_id=\"deployment\" >}}\n* {{< glossary_tooltip text=\"StatefulSet\" term_id=\"statefulset\" >}}\n* {{< glossary_tooltip text=\"DaemonSet\" term_id=\"daemonset\" >}}\n", "relevant_passages": ["What happens when a Node fails in terms of Pod management?"]}
{"query": "A user asked the following question:\nQuestion: What should I do if the drain command blocks due to insufficient resources?\nThis is about the following runbook:\nRunbook Title: PodDisruptionBudget example {#pdb-example}\nRunbook Content: PodDisruptionBudget example {#pdb-example}Consider a cluster with 3 nodes, `node-1` through `node-3`.\nThe cluster is running several applications.  One of them has 3 replicas initially called\n`pod-a`, `pod-b`, and `pod-c`.  Another, unrelated pod without a PDB, called `pod-x`, is also shown.\nInitially, the pods are laid out as follows:  \n|       node-1         |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *available*   | pod-b *available*   | pod-c *available*  |\n| pod-x  *available*   |                     |                    |  \nAll 3 pods are part of a deployment, and they collectively have a PDB which requires\nthere be at least 2 of the 3 pods to be available at all times.  \nFor example, assume the cluster administrator wants to reboot into a new kernel version to fix a bug in the kernel.\nThe cluster administrator first tries to drain `node-1` using the `kubectl drain` command.\nThat tool tries to evict `pod-a` and `pod-x`.  This succeeds immediately.\nBoth pods go into the `terminating` state at the same time.\nThis puts the cluster in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* |                     |                    |  \nThe deployment notices that one of the pods is terminating, so it creates a replacement\ncalled `pod-d`.  Since `node-1` is cordoned, it lands on another node.  Something has\nalso created `pod-y` as a replacement for `pod-x`.  \n(Note: for a StatefulSet, `pod-a`, which would be called something like `pod-0`, would need\nto terminate completely before its replacement, which is also called `pod-0` but has a\ndifferent UID, could be created.  Otherwise, the example applies to a StatefulSet as well.)  \nNow the cluster is in this state:  \n|   node-1 *draining*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n| pod-a  *terminating* | pod-b *available*   | pod-c *available*  |\n| pod-x  *terminating* | pod-d *starting*    | pod-y              |  \nAt some point, the pods terminate, and the cluster looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *starting*    | pod-y              |  \nAt this point, if an impatient cluster administrator tries to drain `node-2` or\n`node-3`, the drain command will block, because there are only 2 available\npods for the deployment, and its PDB requires at least 2.  After some time passes, `pod-d` becomes available.  \nThe cluster state now looks like this:  \n|    node-1 *drained*  |       node-2        |       node-3       |\n|:--------------------:|:-------------------:|:------------------:|\n|                      | pod-b *available*   | pod-c *available*  |\n|                      | pod-d *available*   | pod-y              |  \nNow, the cluster administrator tries to drain `node-2`.\nThe drain command will try to evict the two pods in some order, say\n`pod-b` first and then `pod-d`.  It will succeed at evicting `pod-b`.\nBut, when it tries to evict `pod-d`, it will be refused because that would leave only\none pod available for the deployment.  \nThe deployment creates a replacement for `pod-b` called `pod-e`.\nBecause there are not enough resources in the cluster to schedule\n`pod-e` the drain will again block.  The cluster may end up in this\nstate:  \n|    node-1 *drained*  |       node-2        |       node-3       | *no node*          |\n|:--------------------:|:-------------------:|:------------------:|:------------------:|\n|                      | pod-b *terminating* | pod-c *available*  | pod-e *pending*    |\n|                      | pod-d *available*   | pod-y              |                    |  \nAt this point, the cluster administrator needs to\nadd a node back to the cluster to proceed with the upgrade.  \nYou can see how Kubernetes varies the rate at which disruptions\ncan happen, according to:  \n- how many replicas an application needs\n- how long it takes to gracefully shutdown an instance\n- how long it takes a new instance to start up\n- the type of controller\n- the cluster's resource capacity\n", "relevant_passages": ["What should I do if the drain command blocks due to insufficient resources?"]}
{"query": "A user asked the following question:\nQuestion: How are resource allocations managed for Init containers in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Init containers and Linux cgroups {#cgroups}\nRunbook Content: Detailed behaviorInit containers and Linux cgroups {#cgroups}On Linux, resource allocations for Pod level control groups (cgroups) are based on the effective Pod\nrequest and limit, the same as the scheduler.  \n{{< comment >}}\nThis section also present under [sidecar containers](/docs/concepts/workloads/pods/sidecar-containers/) page.\nIf you're editing this section, change both places.\n{{< /comment >}}\n", "relevant_passages": ["How are resource allocations managed for Init containers in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: Can I reschedule a Pod to a different node after it fails?\nThis is about the following runbook:\nRunbook Title: Pods and fault recovery {#pod-fault-recovery}\nRunbook Content: Pod lifetimePods and fault recovery {#pod-fault-recovery}If one of the containers in the Pod fails, then Kubernetes may try to restart that\nspecific container.\nRead [How Pods handle problems with containers](#container-restarts) to learn more.  \nPods can however fail in a way that the cluster cannot recover from, and in that case\nKubernetes does not attempt to heal the Pod further; instead, Kubernetes deletes the\nPod and relies on other components to provide automatic healing.  \nIf a Pod is scheduled to a {{< glossary_tooltip text=\"node\" term_id=\"node\" >}} and that\nnode then fails, the Pod is treated as unhealthy and Kubernetes eventually deletes the Pod.\nA Pod won't survive an {{< glossary_tooltip text=\"eviction\" term_id=\"eviction\" >}} due to\na lack of resources or Node maintenance.  \nKubernetes uses a higher-level abstraction, called a\n{{< glossary_tooltip term_id=\"controller\" text=\"controller\" >}}, that handles the work of\nmanaging the relatively disposable Pod instances.  \nA given Pod (as defined by a UID) is never \"rescheduled\" to a different node; instead,\nthat Pod can be replaced by a new, near-identical Pod. If you make a replacement Pod, it can\neven have same name (as in `.metadata.name`) that the old Pod had, but the replacement\nwould have a different `.metadata.uid` from the old Pod.  \nKubernetes does not guarantee that a replacement for an existing Pod would be scheduled to\nthe same node as the old Pod that was being replaced.\n", "relevant_passages": ["Can I reschedule a Pod to a different node after it fails?"]}
{"query": "A user asked the following question:\nQuestion: How can I inspect the state of an existing Pod in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Understanding ephemeral containers\nRunbook Content: Understanding ephemeral containers{{< glossary_tooltip text=\"Pods\" term_id=\"pod\" >}} are the fundamental building\nblock of Kubernetes applications. Since Pods are intended to be disposable and\nreplaceable, you cannot add a container to a Pod once it has been created.\nInstead, you usually delete and replace Pods in a controlled fashion using\n{{< glossary_tooltip text=\"deployments\" term_id=\"deployment\" >}}.  \nSometimes it's necessary to inspect the state of an existing Pod, however, for\nexample to troubleshoot a hard-to-reproduce bug. In these cases you can run\nan ephemeral container in an existing Pod to inspect its state and run\narbitrary commands.\n", "relevant_passages": ["How can I inspect the state of an existing Pod in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: Can you give me an example of a sidecar container configuration in Kubernetes?\nThis is about the following runbook:\nRunbook Title: Example application {#sidecar-example}\nRunbook Content: Sidecar containers in Kubernetes {#pod-sidecar-containers}Example application {#sidecar-example}Here's an example of a Deployment with two containers, one of which is a sidecar:  \n{{% code_sample language=\"yaml\" file=\"application/deployment-sidecar.yaml\" %}}\n", "relevant_passages": ["Can you give me an example of a sidecar container configuration in Kubernetes?"]}
{"query": "A user asked the following question:\nQuestion: How can I check if my container is in the Running state using kubectl?\nThis is about the following runbook:\nRunbook Title: `Running` {#container-state-running}\nRunbook Content: Container states`Running` {#container-state-running}The `Running` status indicates that a container is executing without issues. If there\nwas a `postStart` hook configured, it has already executed and finished. When you use\n`kubectl` to query a Pod with a container that is `Running`, you also see information\nabout when the container entered the `Running` state.\n", "relevant_passages": ["How can I check if my container is in the Running state using kubectl?"]}
{"query": "A user asked the following question:\nQuestion: What should I do if I need to troubleshoot a bug in a Pod?\nThis is about the following runbook:\nRunbook Title: Understanding ephemeral containers\nRunbook Content: Understanding ephemeral containers{{< glossary_tooltip text=\"Pods\" term_id=\"pod\" >}} are the fundamental building\nblock of Kubernetes applications. Since Pods are intended to be disposable and\nreplaceable, you cannot add a container to a Pod once it has been created.\nInstead, you usually delete and replace Pods in a controlled fashion using\n{{< glossary_tooltip text=\"deployments\" term_id=\"deployment\" >}}.  \nSometimes it's necessary to inspect the state of an existing Pod, however, for\nexample to troubleshoot a hard-to-reproduce bug. In these cases you can run\nan ephemeral container in an existing Pod to inspect its state and run\narbitrary commands.\n", "relevant_passages": ["What should I do if I need to troubleshoot a bug in a Pod?"]}
